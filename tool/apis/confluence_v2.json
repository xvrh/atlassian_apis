{
  "openapi": "3.0.3",
  "info": {
    "title": "The Confluence Cloud REST API v2",
    "description": "This document describes Confluence's v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.",
    "termsOfService": "https://developer.atlassian.com/platform/marketplace/atlassian-developer-terms/",
    "version": "2.0.0"
  },
  "externalDocs": {
    "description": "The online and complete version of the Confluence Cloud REST API docs.",
    "url": "https://developer.atlassian.com/cloud/confluence/rest/v2"
  },
  "servers": [
    {
      "url": "https://{your-domain}/wiki/api/v2",
      "variables": {
        "your-domain": {
          "default": "no-default",
          "description": "Specific domain of the Confluence site being used. Must be provided."
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Attachment",
      "description": ""
    },
    {
      "name": "Ancestors",
      "description": ""
    },
    {
      "name": "Blog Post",
      "description": ""
    },
    {
      "name": "Children",
      "description": ""
    },
    {
      "name": "Comment",
      "description": ""
    },
    {
      "name": "Content",
      "description": ""
    },
    {
      "name": "Content Properties",
      "description": ""
    },
    {
      "name": "Custom Content",
      "description": ""
    },
    {
      "name": "Label",
      "description": ""
    },
    {
      "name": "Like",
      "description": ""
    },
    {
      "name": "Operation",
      "description": ""
    },
    {
      "name": "Page",
      "description": ""
    },
    {
      "name": "Space",
      "description": ""
    },
    {
      "name": "Space Permissions",
      "description": ""
    },
    {
      "name": "Space Properties",
      "description": ""
    },
    {
      "name": "Task",
      "description": ""
    },
    {
      "name": "User",
      "description": ""
    },
    {
      "name": "Version",
      "description": ""
    }
  ],
  "paths": {
    "/attachments": {
      "get": {
        "tags": [
          "Attachment"
        ],
        "operationId": "getAttachments",
        "summary": "Get attachments",
        "description": "Returns all attachments. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the container of the attachment.",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/AttachmentSortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "description": "Filter the results to attachments based on their status. By default, `current` and `archived` are used.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "current",
                  "archived",
                  "trashed"
                ]
              }
            }
          },
          {
            "name": "mediaType",
            "in": "query",
            "required": false,
            "description": "Filters on the mediaType of attachments. Only one may be specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "required": false,
            "description": "Filters on the file-name of attachments. Only one may be specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 50,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested attachments are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Attachment>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Attachment"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/attachments?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/attachments/{id}": {
      "get": {
        "tags": [
          "Attachment"
        ],
        "operationId": "getAttachmentById",
        "summary": "Get attachment by id",
        "description": "Returns a specific attachment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the attachment's container.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the attachment to be returned. If you don't know the attachment's ID, use Get attachments for page/blogpost/custom content.",
            "schema": {
              "type": "string",
              "pattern": "(att)?[0-9]+"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested attachment is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested attachment or the attachment was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "delete": {
        "tags": [
          "Attachment"
        ],
        "operationId": "deleteAttachment",
        "summary": "Delete attachment",
        "description": "Delete an attachment by id.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the container of the attachment. Permission to delete attachments in the space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the attachment to be deleted.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the attachment was successfully deleted.",
            "content": {}
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if:\n- The provided attachment does not exist\n- The user does not have permissions to view the container of the attachment\n- The user does not have the needed permissions to delete an attachment in the space"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "delete:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "delete:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "DELETE"
      }
    },
    "/attachments/{id}/labels": {
      "get": {
        "tags": [
          "Label"
        ],
        "operationId": "getAttachmentLabels",
        "summary": "Get labels for attachment",
        "description": "Returns the labels of specific attachment. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the parent content of the attachment and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the attachment for which labels should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "prefix",
            "in": "query",
            "required": false,
            "description": "Filter the results to labels based on their prefix.",
            "schema": {
              "type": "string",
              "enum": [
                "my",
                "team",
                "global",
                "system"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "type": "string",
              "items": {
                "$ref": "#/components/schemas/LabelSortOrder"
              }
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested labels are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Label>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/attachments/<id>/labels?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nparent content of the requested attachment or the attachment was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/attachments/{id}/operations": {
      "get": {
        "tags": [
          "Operation"
        ],
        "operationId": "getAttachmentOperations",
        "summary": "Get permitted operations for attachment",
        "description": "Returns the permitted operations on specific attachment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the parent content of the attachment and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the attachment for which operations should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested operations are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedOperationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nparent content of the requested attachment or the attachment was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/attachments/{attachment-id}/properties": {
      "get": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "getAttachmentContentProperties",
        "summary": "Get content properties for attachment",
        "description": "Retrieves all Content Properties tied to a specified attachment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the attachment.",
        "parameters": [
          {
            "name": "attachment-id",
            "in": "path",
            "required": true,
            "description": "The ID of the attachment for which content properties should be returned.",
            "schema": {
              "type": "string",
              "pattern": "(att)?[0-9]+"
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "description": "Filters the response to return a specific content property with matching key (case sensitive).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/ContentPropertySortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested content properties are successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<ContentProperty>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContentProperty"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/attachments/<attachment-id>/properties?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified attachment or the attachment was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "post": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "createAttachmentProperty",
        "summary": "Create content property for attachment",
        "description": "Creates a new content property for an attachment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to update the attachment.",
        "parameters": [
          {
            "name": "attachment-id",
            "in": "path",
            "required": true,
            "description": "The ID of the attachment to create a property for.",
            "schema": {
              "type": "string",
              "pattern": "(att)?[0-9]+"
            }
          }
        ],
        "requestBody": {
          "description": "The content property to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the content property was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified attachment or the attachment was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence",
              "write:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:attachment:confluence",
              "write:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      }
    },
    "/attachments/{attachment-id}/properties/{property-id}": {
      "get": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "getAttachmentContentPropertiesById",
        "summary": "Get content property for attachment by id",
        "description": "Retrieves a specific Content Property by ID that is attached to a specified attachment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the attachment.",
        "parameters": [
          {
            "name": "attachment-id",
            "in": "path",
            "required": true,
            "description": "The ID of the attachment for which content properties should be returned.",
            "schema": {
              "pattern": "(att)?0-9+",
              "type": "string"
            }
          },
          {
            "name": "property-id",
            "in": "path",
            "required": true,
            "description": "The ID of the content property to be returned",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested content property is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified attachment,the attachment was not found, or the property was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "put": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "updateAttachmentPropertyById",
        "summary": "Update content property for attachment by id",
        "description": "Update a content property for attachment by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the attachment.",
        "parameters": [
          {
            "name": "attachment-id",
            "in": "path",
            "required": true,
            "description": "The ID of the attachment the property belongs to.",
            "schema": {
              "type": "string",
              "pattern": "(att)?[0-9]+"
            }
          },
          {
            "name": "property-id",
            "in": "path",
            "required": true,
            "description": "The ID of the property to be updated.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "The content property to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the content property was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified attachment or the attachment was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence",
              "write:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:attachment:confluence",
              "write:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      },
      "delete": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "deleteAttachmentPropertyById",
        "summary": "Delete content property for attachment by id",
        "description": "Deletes a content property for an attachment by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to attachment the page.",
        "parameters": [
          {
            "name": "attachment-id",
            "in": "path",
            "required": true,
            "description": "The ID of the attachment the property belongs to.",
            "schema": {
              "type": "string",
              "pattern": "(att)?[0-9]+"
            }
          },
          {
            "name": "property-id",
            "in": "path",
            "required": true,
            "description": "The ID of the property to be deleted.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the content property was deleted successfully."
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified attachment or the attachment was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence",
              "write:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:attachment:confluence",
              "write:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      }
    },
    "/attachments/{id}/versions": {
      "get": {
        "tags": [
          "Version"
        ],
        "operationId": "getAttachmentVersions",
        "summary": "Get attachment versions",
        "description": "Returns the versions of specific attachment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the attachment and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the attachment to be queried for its versions. If you don't know the attachment ID, use Get attachments and filter the results.",
            "schema": {
              "type": "string",
              "pattern": "(att)?[0-9]+"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/VersionSortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested attachment versions are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Version>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AttachmentVersion"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/attachments/<id>/versions?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/attachments/{attachment-id}/versions/{version-number}": {
      "get": {
        "tags": [
          "Version"
        ],
        "operationId": "getAttachmentVersionDetails",
        "summary": "Get version details for attachment version",
        "description": "Retrieves version details for the specified attachment and version number.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the attachment.",
        "parameters": [
          {
            "name": "attachment-id",
            "in": "path",
            "required": true,
            "description": "The ID of the attachment for which version details should be returned.",
            "schema": {
              "pattern": "(att)?0-9+",
              "type": "string"
            }
          },
          {
            "name": "version-number",
            "in": "path",
            "required": true,
            "description": "The version number of the attachment to be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested version details are successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedVersion"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified attachment, the attachment was not found, or the version number does not exist.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/blogposts": {
      "get": {
        "tags": [
          "Blog Post"
        ],
        "operationId": "getBlogPosts",
        "summary": "Get blog posts",
        "description": "Returns all blog posts. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nOnly blog posts that the user has permission to view will be returned.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "description": "Filter the results based on blog post ids. Multiple blog post ids can be specified as a comma-separated list.",
            "schema": {
              "type": "array",
              "maxItems": 250,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "space-id",
            "in": "query",
            "required": false,
            "description": "Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.",
            "schema": {
              "type": "array",
              "maxItems": 100,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/BlogPostSortOrder"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "description": "Filter the results to blog posts based on their status. By default, `current` is used.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "current",
                  "deleted",
                  "trashed"
                ]
              }
            }
          },
          {
            "name": "title",
            "in": "query",
            "required": false,
            "description": "Filter the results to blog posts based on their title.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of blog posts per result to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested blog posts are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<BlogPost>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BlogPostBulk"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/blogposts?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "post": {
        "tags": [
          "Blog Post"
        ],
        "operationId": "createBlogPost",
        "summary": "Create blog post",
        "description": "Creates a new blog post in the space specified by the spaceId.\n\nBy default this will create the blog post as a non-draft, unless the status is specified as draft.\nIf creating a non-draft, the title must not be empty.\n\nCurrently only supports the storage representation specified in the body.representation enums below",
        "parameters": [
          {
            "name": "private",
            "in": "query",
            "description": "The blog post will be private. Only the user who creates this blog post will have permission to view and edit one.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BlogPostCreateRequest"
        },
        "responses": {
          "200": {
            "description": "Returned if the blog post was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogPostSingle"
                }
              }
            }
          },
          "400": {
            "description": "Returned if invalid values were passed in for any of the enums, a REQUIRED parameter was missing, or if the given title is a duplicate in the space",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing from the request",
            "content": {}
          },
          "404": {
            "description": "Returned if:\n- The provided space does not exist\n- The user does not have permissions to view the space\n- The user does not have the needed permissions to create a blog post in the provided space",
            "content": {}
          },
          "413": {
            "description": "Returned if the request is too large in size (over 5 MB)",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      }
    },
    "/blogposts/{id}": {
      "get": {
        "tags": [
          "Blog Post"
        ],
        "operationId": "getBlogPostById",
        "summary": "Get blog post by id",
        "description": "Returns a specific blog post.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the blog post and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the blog post to be returned. If you don't know the blog post ID, use Get blog posts and filter the results.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentationSingle"
            }
          },
          {
            "name": "get-draft",
            "in": "query",
            "description": "Retrieve the draft version of this blog post.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested blog post is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogPostSingle"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested blog post or the blog post was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "put": {
        "tags": [
          "Blog Post"
        ],
        "operationId": "updateBlogPost",
        "summary": "Update blog post",
        "description": "Update a blog post by id.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the blog post and its corresponding space. Permission to update blog posts in the space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the blog post to be updated. If you don't know the blog post ID, use Get Blog Posts and filter the results.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BlogPostUpdateRequest"
        },
        "responses": {
          "200": {
            "description": "Returned if the requested blog post is successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogPostSingle"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if:\n- The provided blog post does not exist\n- The user does not have permissions to view the blog post\n- The user does not have the needed permissions to update a blog post in the space"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      },
      "delete": {
        "tags": [
          "Blog Post"
        ],
        "operationId": "deleteBlogPost",
        "summary": "Delete blog post",
        "description": "Delete a blog post by id.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the blog post and its corresponding space. Permission to delete blog posts in the space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the blog post to be deleted.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the blog post was successfully deleted.",
            "content": {}
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if:\n- The provided blog post does not exist\n- The user does not have permissions to view the blog post\n- The user does not have the needed permissions to delete a blog post in the space"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "delete:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "delete:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "DELETE"
      }
    },
    "/blogposts/{id}/attachments": {
      "get": {
        "tags": [
          "Attachment"
        ],
        "operationId": "getBlogpostAttachments",
        "summary": "Get attachments for blog post",
        "description": "Returns the attachments of specific blog post. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the blog post and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the blog post for which attachments should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/AttachmentSortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "description": "Filter the results to attachments based on their status. By default, `current` and `archived` are used.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "current",
                  "archived",
                  "trashed"
                ]
              }
            }
          },
          {
            "name": "mediaType",
            "in": "query",
            "required": false,
            "description": "Filters on the mediaType of attachments. Only one may be specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "required": false,
            "description": "Filters on the file-name of attachments. Only one may be specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 50,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested attachments are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Attachment>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Attachment"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/blogposts/<id>/attachments?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested blog post or the blog post was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/blogposts/{id}/custom-content": {
      "get": {
        "tags": [
          "Custom Content"
        ],
        "operationId": "getCustomContentByTypeInBlogPost",
        "summary": "Get custom content by type in blog post",
        "description": "Returns all custom content for a given type within a given blogpost. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the custom content, the container of the custom content (blog post), and the corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the blog post for which custom content should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "description": "The type of custom content being requested. See: https://developer.atlassian.com/cloud/confluence/custom-content/ for additional details on custom content.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/CustomContentSortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.\n\nNote: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.",
            "schema": {
              "$ref": "#/components/schemas/CustomContentBodyRepresentation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested custom content is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<CustomContent>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomContentBulk"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/blogposts/{id}/custom-content?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the given blog post is not found. Returned if the type of custom content is not found. Note, this is distinct from the type being present, but no instances of the type, which would be a 200 with empty results."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/blogposts/{id}/labels": {
      "get": {
        "tags": [
          "Label"
        ],
        "operationId": "getBlogPostLabels",
        "summary": "Get labels for blog post",
        "description": "Returns the labels of specific blog post. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the blog post and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the blog post for which labels should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "prefix",
            "in": "query",
            "required": false,
            "description": "Filter the results to labels based on their prefix.",
            "schema": {
              "type": "string",
              "enum": [
                "my",
                "team",
                "global",
                "system"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "type": "string",
              "items": {
                "$ref": "#/components/schemas/LabelSortOrder"
              }
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested labels are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Label>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/blogposts/<id>/labels?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested blog post or the blog post was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/blogposts/{id}/likes/count": {
      "get": {
        "tags": [
          "Like"
        ],
        "operationId": "getBlogPostLikeCount",
        "summary": "Get like count for blog post",
        "description": "Returns the count of likes of specific blog post.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the blog post and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the blog post for which like count should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested count is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Integer",
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The count number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested blog post or the blog post was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/blogposts/{id}/likes/users": {
      "get": {
        "tags": [
          "Like"
        ],
        "operationId": "getBlogPostLikeUsers",
        "summary": "Get account IDs of likes for blog post",
        "description": "Returns the account IDs of likes of specific blog post.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the blog post and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the blog post for which account IDs should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of account IDs per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 0,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested account IDs are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<String>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Like"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/blogposts/<id>/likes/users?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested blog post or the blog post was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/blogposts/{blogpost-id}/properties": {
      "get": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "getBlogpostContentProperties",
        "summary": "Get content properties for blog post",
        "description": "Retrieves all Content Properties tied to a specified blog post.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the blog post.",
        "parameters": [
          {
            "name": "blogpost-id",
            "in": "path",
            "required": true,
            "description": "The ID of the blog post for which content properties should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "description": "Filters the response to return a specific content property with matching key (case sensitive).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/ContentPropertySortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested content properties are successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<ContentProperty>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContentProperty"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/blogposts/<blogpost-id>/properties?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified blog post or the blog post was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "post": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "createBlogpostProperty",
        "summary": "Create content property for blog post",
        "description": "Creates a new property for a blogpost.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to update the blog post.",
        "parameters": [
          {
            "name": "blogpost-id",
            "in": "path",
            "required": true,
            "description": "The ID of the blog post to create a property for.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "The content property to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the content property was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified blog post or the blog post was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      }
    },
    "/blogposts/{blogpost-id}/properties/{property-id}": {
      "get": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "getBlogpostContentPropertiesById",
        "summary": "Get content property for blog post by id",
        "description": "Retrieves a specific Content Property by ID that is attached to a specified blog post.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the blog post.",
        "parameters": [
          {
            "name": "blogpost-id",
            "in": "path",
            "required": true,
            "description": "The ID of the blog post for which content properties should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "property-id",
            "in": "path",
            "required": true,
            "description": "The ID of the property being requested",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested content property is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/blogposts/<blogpost-id>/properties/<property-id>?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified blog post,the blog post was not found, or the property was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "put": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "updateBlogpostPropertyById",
        "summary": "Update content property for blog post by id",
        "description": "Update a content property for blog post by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the blog post.",
        "parameters": [
          {
            "name": "blogpost-id",
            "in": "path",
            "required": true,
            "description": "The ID of the blog post the property belongs to.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "property-id",
            "in": "path",
            "required": true,
            "description": "The ID of the property to be updated.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "The content property to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the content property was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified blog post or the blog post was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      },
      "delete": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "deleteBlogpostPropertyById",
        "summary": "Delete content property for blogpost by id",
        "description": "Deletes a content property for a blogpost by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the blog post.",
        "parameters": [
          {
            "name": "blogpost-id",
            "in": "path",
            "required": true,
            "description": "The ID of the blog post the property belongs to.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "property-id",
            "in": "path",
            "required": true,
            "description": "The ID of the property to be deleted.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the content property was deleted successfully."
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified blog post or the blog post was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      }
    },
    "/blogposts/{id}/operations": {
      "get": {
        "tags": [
          "Operation"
        ],
        "operationId": "getBlogPostOperations",
        "summary": "Get permitted operations for blog post",
        "description": "Returns the permitted operations on specific blog post.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the parent content of the blog post and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the blog post for which operations should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested operations are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedOperationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nparent content of the requested blog post or the it was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/blogposts/{id}/versions": {
      "get": {
        "tags": [
          "Version"
        ],
        "operationId": "getBlogPostVersions",
        "summary": "Get blog post versions",
        "description": "Returns the versions of specific blog post. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the blog post and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the blog post to be queried for its versions. If you don't know the blog post ID, use Get blog posts and filter the results.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/VersionSortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested blog post versions are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Version>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BlogPostVersion"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/blogposts/<id>/versions?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/blogposts/{blogpost-id}/versions/{version-number}": {
      "get": {
        "tags": [
          "Version"
        ],
        "operationId": "getBlogPostVersionDetails",
        "summary": "Get version details for blog post version",
        "description": "Retrieves version details for the specified blog post and version number.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the blog post.",
        "parameters": [
          {
            "name": "blogpost-id",
            "in": "path",
            "required": true,
            "description": "The ID of the blog post for which version details should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "version-number",
            "in": "path",
            "required": true,
            "description": "The version number of the blog post to be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested version details are successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedVersion"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified blog post, the blog post was not found, or the version number does not exist.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/content/convert-ids-to-types": {
      "post": {
        "tags": [
          "Content"
        ],
        "operationId": "convertContentIdsToContentTypes",
        "summary": "Convert content ids to content types",
        "description": "Converts a list of content ids into their associated content types. This is useful for users migrating from v1 to v2\nwho may have stored just content ids without their associated type. This will return types as they should be used in v2.\nNotably, this will return `inline-comment` for inline comments and `footer-comment` for footer comments, which is distinct from them\nboth being represented by `comment` in v1.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the requested content. Any content that the user does not have permission to view or does not exist will map to `null` in the response.",
        "requestBody": {
          "$ref": "#/components/requestBodies/ContentIdToContentTypeRequest"
        },
        "responses": {
          "200": {
            "description": "Returned if the requested content ids are successfully converted to their content types",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentIdToContentTypeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:content.metadata:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:content.metadata:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "NONE"
      }
    },
    "/custom-content": {
      "get": {
        "tags": [
          "Custom Content"
        ],
        "operationId": "getCustomContentByType",
        "summary": "Get custom content by type",
        "description": "Returns all custom content for a given type. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the custom content, the container of the custom content, and the corresponding space (if different from the container).",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": true,
            "description": "The type of custom content being requested. See: https://developer.atlassian.com/cloud/confluence/custom-content/ for additional details on custom content.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "description": "Filter the results based on custom content ids. Multiple custom content ids can be specified as a comma-separated list.",
            "schema": {
              "type": "array",
              "maxItems": 250,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "space-id",
            "in": "query",
            "required": false,
            "description": "Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.",
            "schema": {
              "type": "array",
              "maxItems": 100,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/CustomContentSortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.\n\nNote: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.",
            "schema": {
              "$ref": "#/components/schemas/CustomContentBodyRepresentation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested custom content is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<CustomContent>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomContentBulk"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/custom-content?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the type of custom content is not found. Note, this is distinct from the type being present, but no instances of the type, which would be a 200 with empty results."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "post": {
        "tags": [
          "Custom Content"
        ],
        "operationId": "createCustomContent",
        "summary": "Create custom content",
        "description": "Creates a new custom content in the given space, page, blogpost or other custom content.\n\nOnly one of `spaceId`, `pageId`, `blogPostId`, or `customContentId` is required in the request body.\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space. Permission to create custom content in the space.",
        "requestBody": {
          "$ref": "#/components/requestBodies/CustomContentCreateRequest"
        },
        "responses": {
          "201": {
            "description": "Returned if the requested custom content is created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomContentSingle"
                }
              }
            },
            "headers": {
              "location": {
                "schema": {
                  "type": "string"
                },
                "description": "Relative link to created custom content Example response header format: `location: </wiki/api/v2/custom-content/<id>>`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the type of custom content is not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "write:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      }
    },
    "/custom-content/{id}": {
      "get": {
        "tags": [
          "Custom Content"
        ],
        "operationId": "getCustomContentById",
        "summary": "Get custom content by id",
        "description": "Returns a specific piece of custom content. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the custom content, the container of the custom content, and the corresponding space (if different from the container).",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the custom content to be returned. If you don't know the custom content ID, use Get Custom Content by Type and filter the results.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.\n\nNote: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.",
            "schema": {
              "$ref": "#/components/schemas/CustomContentBodyRepresentationSingle"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested custom content is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomContentSingle"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested custom content or the custom content was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "put": {
        "tags": [
          "Custom Content"
        ],
        "operationId": "updateCustomContent",
        "summary": "Update custom content",
        "description": "Update a custom content by id.\n\n`spaceId` is always required and maximum one of `pageId`, `blogPostId`, or `customContentId` is allowed in the request body.\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space. Permission to update custom content in the space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the custom content to be updated. If you don't know the custom content ID, use Get Custom Content by Type and filter the results.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CustomContentUpdateRequest"
        },
        "responses": {
          "200": {
            "description": "Returned if the requested custom content is updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomContentSingle"
                }
              }
            },
            "headers": {
              "location": {
                "schema": {
                  "type": "string"
                },
                "description": "Relative link to updated custom content Example response header format: `location: </wiki/api/v2/custom-content/<id>>`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the type of custom content is not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "write:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      },
      "delete": {
        "tags": [
          "Custom Content"
        ],
        "operationId": "deleteCustomContent",
        "summary": "Delete custom content",
        "description": "Delete a custom content by id.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space. Permission to delete custom content in the space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the custom content to be deleted.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the custom content was deleted.",
            "content": {}
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the custom content is not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "delete:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "delete:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "DELETE"
      }
    },
    "/custom-content/{id}/attachments": {
      "get": {
        "tags": [
          "Attachment"
        ],
        "operationId": "getCustomContentAttachments",
        "summary": "Get attachments for custom content",
        "description": "Returns the attachments of specific custom content. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the custom content and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the custom content for which attachments should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/AttachmentSortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "description": "Filter the results to attachments based on their status. By default, `current` and `archived` are used.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "current",
                  "archived",
                  "trashed"
                ]
              }
            }
          },
          {
            "name": "mediaType",
            "in": "query",
            "required": false,
            "description": "Filters on the mediaType of attachments. Only one may be specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "required": false,
            "description": "Filters on the file-name of attachments. Only one may be specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 50,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested attachments are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Attachment>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Attachment"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/custom-content/<id>/attachments?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested custom content or the custom content was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/custom-content/{id}/labels": {
      "get": {
        "tags": [
          "Label"
        ],
        "operationId": "getCustomContentLabels",
        "summary": "Get labels for custom content",
        "description": "Returns the labels for a specific piece of custom content. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the custom content and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the custom content for which labels should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "prefix",
            "in": "query",
            "required": false,
            "description": "Filter the results to labels based on their prefix.",
            "schema": {
              "type": "string",
              "enum": [
                "my",
                "team",
                "global",
                "system"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "type": "string",
              "items": {
                "$ref": "#/components/schemas/LabelSortOrder"
              }
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested labels are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Label>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/custom-content/<id>/labels?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/custom-content/{id}/operations": {
      "get": {
        "tags": [
          "Operation"
        ],
        "operationId": "getCustomContentOperations",
        "summary": "Get permitted operations for custom content",
        "description": "Returns the permitted operations on specific custom content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the parent content of the custom content and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the custom content for which operations should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested operations are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedOperationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nparent content of the requested custom content or the it was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/custom-content/{custom-content-id}/properties": {
      "get": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "getCustomContentContentProperties",
        "summary": "Get content properties for custom content",
        "description": "Retrieves Content Properties tied to a specified custom content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the custom content.",
        "parameters": [
          {
            "name": "custom-content-id",
            "in": "path",
            "required": true,
            "description": "The ID of the custom content for which content properties should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "description": "Filters the response to return a specific content property with matching key (case sensitive).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/ContentPropertySortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested content properties are successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<ContentProperty>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContentProperty"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/custom-content/<custom-content-id>/properties?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified custom content or the custom content was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "post": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "createCustomContentProperty",
        "summary": "Create content property for custom content",
        "description": "Creates a new content property for a piece of custom content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to update the custom content.",
        "parameters": [
          {
            "name": "custom-content-id",
            "in": "path",
            "required": true,
            "description": "The ID of the custom content to create a property for.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "The content property to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the content property was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified custom content or the custom content was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence",
              "write:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:custom-content:confluence",
              "write:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      }
    },
    "/custom-content/{custom-content-id}/properties/{property-id}": {
      "get": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "getCustomContentContentPropertiesById",
        "summary": "Get content property for custom content by id",
        "description": "Retrieves a specific Content Property by ID that is attached to a specified custom content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the page.",
        "parameters": [
          {
            "name": "custom-content-id",
            "in": "path",
            "required": true,
            "description": "The ID of the custom content for which content properties should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "property-id",
            "in": "path",
            "required": true,
            "description": "The ID of the content property being requested.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested content property is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified custom content, the custom content was not found, or the property was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "put": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "updateCustomContentPropertyById",
        "summary": "Update content property for custom content by id",
        "description": "Update a content property for a piece of custom content by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the custom content.",
        "parameters": [
          {
            "name": "custom-content-id",
            "in": "path",
            "required": true,
            "description": "The ID of the custom content the property belongs to.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "property-id",
            "in": "path",
            "required": true,
            "description": "The ID of the property to be updated.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "The content property to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the content property was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified custom content or the custom content was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence",
              "write:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:custom-content:confluence",
              "write:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      },
      "delete": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "deleteCustomContentPropertyById",
        "summary": "Delete content property for custom content by id",
        "description": "Deletes a content property for a piece of custom content by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the custom content.",
        "parameters": [
          {
            "name": "custom-content-id",
            "in": "path",
            "required": true,
            "description": "The ID of the custom content the property belongs to.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "property-id",
            "in": "path",
            "required": true,
            "description": "The ID of the property to be deleted.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the content property was deleted successfully."
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified custom content or the custom content was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence",
              "write:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:custom-content:confluence",
              "write:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      }
    },
    "/labels/{id}/attachments": {
      "get": {
        "tags": [
          "Attachment"
        ],
        "operationId": "getLabelAttachments",
        "summary": "Get attachments for label",
        "description": "Returns the attachments of specified label. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the attachment and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the label for which attachments should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/AttachmentSortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested attachments for specified label were successfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Attachment>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Attachment"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/labels/<id>/attachment?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested label or label was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/labels/{id}/blogposts": {
      "get": {
        "tags": [
          "Blog Post"
        ],
        "operationId": "getLabelBlogPosts",
        "summary": "Get blog posts for label",
        "description": "Returns the blogposts of specified label. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the label for which blog posts should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "space-id",
            "in": "query",
            "required": false,
            "description": "Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.",
            "schema": {
              "type": "array",
              "maxItems": 100,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/BlogPostSortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of blog posts per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested blog posts for specified label were successfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<BlogPost>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BlogPostBulk"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/labels/<id>/blogposts?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested label or label was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/labels/{id}/pages": {
      "get": {
        "tags": [
          "Page"
        ],
        "operationId": "getLabelPages",
        "summary": "Get pages for label",
        "description": "Returns the pages of specified label. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the label for which pages should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "space-id",
            "in": "query",
            "required": false,
            "description": "Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.",
            "schema": {
              "type": "array",
              "maxItems": 100,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/PageSortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested pages for specified label were successfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Page>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PageBulk"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/labels/<id>/pages?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested label or label was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/pages": {
      "get": {
        "tags": [
          "Page"
        ],
        "operationId": "getPages",
        "summary": "Get pages",
        "description": "Returns all pages. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nOnly pages that the user has permission to view will be returned.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "description": "Filter the results based on page ids. Multiple page ids can be specified as a comma-separated list.",
            "schema": {
              "type": "array",
              "maxItems": 250,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "space-id",
            "in": "query",
            "required": false,
            "description": "Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.",
            "schema": {
              "type": "array",
              "maxItems": 100,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/PageSortOrder"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "description": "Filter the results to pages based on their status. By default, `current` and `archived` are used.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "current",
                  "archived",
                  "deleted",
                  "trashed"
                ]
              }
            }
          },
          {
            "name": "title",
            "in": "query",
            "required": false,
            "description": "Filter the results to pages based on their title.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested pages are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Page>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PageBulk"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/pages?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "post": {
        "tags": [
          "Page"
        ],
        "operationId": "createPage",
        "summary": "Create page",
        "description": "Creates a page in the space.\n\nPages are created as published by default unless specified as a draft in the status field. If creating a published page, the title must be specified.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the corresponding space. Permission to create a page in the space.",
        "parameters": [
          {
            "name": "embedded",
            "in": "query",
            "description": "Tag the content as embedded and content will be created in NCS.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "private",
            "in": "query",
            "description": "The page will be private. Only the user who creates this page will have permission to view and edit one.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PageCreateRequest"
        },
        "responses": {
          "200": {
            "description": "Returned if the page was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageSingle"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing from the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if:\n- The space does not exist\n- The user does not have permissions to view the space\n- The user does not have the needed permissions to create a page in the provided space"
          },
          "413": {
            "description": "Returned if the request is too large in size (over 5 MB).",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      }
    },
    "/pages/{id}": {
      "get": {
        "tags": [
          "Page"
        ],
        "operationId": "getPageById",
        "summary": "Get page by id",
        "description": "Returns a specific page.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the page and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the page to be returned. If you don't know the page ID, use Get pages and filter the results.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentationSingle"
            }
          },
          {
            "name": "get-draft",
            "in": "query",
            "description": "Retrieve the draft version of this page.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested page is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageSingle"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "put": {
        "tags": [
          "Page"
        ],
        "operationId": "updatePage",
        "summary": "Update page",
        "description": "Update a page by id.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the page and its corresponding space. Permission to update pages in the space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the page to be updated. If you don't know the page ID, use Get Pages and filter the results.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PageUpdateRequest"
        },
        "responses": {
          "200": {
            "description": "Returned if the requested page is successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageSingle"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if:\n- The provided page does not exist\n- The user does not have permissions to view the page\n- The user does not have the needed permissions to update a page in the space\n- The user provides a parentId for a page that does not exist or they do not have permission to view\n- There are no spaces associated with the given spaceId"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      },
      "delete": {
        "tags": [
          "Page"
        ],
        "operationId": "deletePage",
        "summary": "Delete page",
        "description": "Delete a page by id.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the page and its corresponding space. Permission to delete pages in the space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the page to be deleted.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the page was successfully deleted.",
            "content": {}
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if:\n- The provided page does not exist\n- The user does not have permissions to view the page\n- The user does not have the needed permissions to delete a page in the space"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "delete:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "delete:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "DELETE"
      }
    },
    "/pages/{id}/attachments": {
      "get": {
        "tags": [
          "Attachment"
        ],
        "operationId": "getPageAttachments",
        "summary": "Get attachments for page",
        "description": "Returns the attachments of specific page. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the page for which attachments should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/AttachmentSortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "description": "Filter the results to attachments based on their status. By default, `current` and `archived` are used.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "current",
                  "archived",
                  "trashed"
                ]
              }
            }
          },
          {
            "name": "mediaType",
            "in": "query",
            "required": false,
            "description": "Filters on the mediaType of attachments. Only one may be specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "required": false,
            "description": "Filters on the file-name of attachments. Only one may be specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 50,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested attachments are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Attachment>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Attachment"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/pages/<id>/attachments?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:attachment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/pages/{id}/custom-content": {
      "get": {
        "tags": [
          "Custom Content"
        ],
        "operationId": "getCustomContentByTypeInPage",
        "summary": "Get custom content by type in page",
        "description": "Returns all custom content for a given type within a given page. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the custom content, the container of the custom content (page), and the corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the page for which custom content should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "description": "The type of custom content being requested. See: https://developer.atlassian.com/cloud/confluence/custom-content/ for additional details on custom content.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/CustomContentSortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.\n\nNote: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.",
            "schema": {
              "$ref": "#/components/schemas/CustomContentBodyRepresentation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested custom content is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<CustomContent>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomContentBulk"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/pages/{id}/custom-content?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the given page is not found. Returned if the type of custom content is not found. Note, this is distinct from the type being present, but no instances of the type, which would be a 200 with empty results."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/pages/{id}/labels": {
      "get": {
        "tags": [
          "Label"
        ],
        "operationId": "getPageLabels",
        "summary": "Get labels for page",
        "description": "Returns the labels of specific page. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the page for which labels should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "prefix",
            "in": "query",
            "required": false,
            "description": "Filter the results to labels based on their prefix.",
            "schema": {
              "type": "string",
              "enum": [
                "my",
                "team",
                "global",
                "system"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "type": "string",
              "items": {
                "$ref": "#/components/schemas/LabelSortOrder"
              }
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested labels are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Label>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/pages/<id>/labels?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/pages/{id}/likes/count": {
      "get": {
        "tags": [
          "Like"
        ],
        "operationId": "getPageLikeCount",
        "summary": "Get like count for page",
        "description": "Returns the count of likes of specific page.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the page for which like count should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested count is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Integer",
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The count number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/pages/{id}/likes/users": {
      "get": {
        "tags": [
          "Like"
        ],
        "operationId": "getPageLikeUsers",
        "summary": "Get account IDs of likes for page",
        "description": "Returns the account IDs of likes of specific page.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the page for which like count should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of account IDs per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 0,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested account IDs are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<String>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Like"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/pages/<id>/likes/users?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/pages/{id}/operations": {
      "get": {
        "tags": [
          "Operation"
        ],
        "operationId": "getPageOperations",
        "summary": "Get permitted operations for page",
        "description": "Returns the permitted operations on specific page.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the parent content of the page and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the page for which operations should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested operations are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedOperationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nparent content of the requested page or the it was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/pages/{page-id}/properties": {
      "get": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "getPageContentProperties",
        "summary": "Get content properties for page",
        "description": "Retrieves Content Properties tied to a specified page.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the page.",
        "parameters": [
          {
            "name": "page-id",
            "in": "path",
            "required": true,
            "description": "The ID of the page for which content properties should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "description": "Filters the response to return a specific content property with matching key (case sensitive).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/ContentPropertySortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested content properties are successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<ContentProperty>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContentProperty"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/pages/<page-id>/properties?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified page or the page was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "post": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "createPageProperty",
        "summary": "Create content property for page",
        "description": "Creates a new content property for a page.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to update the page.",
        "parameters": [
          {
            "name": "page-id",
            "in": "path",
            "required": true,
            "description": "The ID of the page to create a property for.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "The content property to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the content property was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified page or the page was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      }
    },
    "/pages/{page-id}/properties/{property-id}": {
      "get": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "getPageContentPropertiesById",
        "summary": "Get content property for page by id",
        "description": "Retrieves a specific Content Property by ID that is attached to a specified page.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the page.",
        "parameters": [
          {
            "name": "page-id",
            "in": "path",
            "required": true,
            "description": "The ID of the page for which content properties should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "property-id",
            "in": "path",
            "required": true,
            "description": "The ID of the content property being requested.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested content property is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified page, the page was not found, or the property was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "put": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "updatePagePropertyById",
        "summary": "Update content property for page by id",
        "description": "Update a content property for a page by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the page.",
        "parameters": [
          {
            "name": "page-id",
            "in": "path",
            "required": true,
            "description": "The ID of the page the property belongs to.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "property-id",
            "in": "path",
            "required": true,
            "description": "The ID of the property to be updated.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "The content property to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the content property was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified page or the page was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      },
      "delete": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "deletePagePropertyById",
        "summary": "Delete content property for page by id",
        "description": "Deletes a content property for a page by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the page.",
        "parameters": [
          {
            "name": "page-id",
            "in": "path",
            "required": true,
            "description": "The ID of the page the property belongs to.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "property-id",
            "in": "path",
            "required": true,
            "description": "The ID of the property to be deleted.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the content property was deleted successfully."
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified page or the page was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence",
              "write:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      }
    },
    "/pages/{id}/versions": {
      "get": {
        "tags": [
          "Version"
        ],
        "operationId": "getPageVersions",
        "summary": "Get page versions",
        "description": "Returns the versions of specific page.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the page and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the page to be queried for its versions. If you don't know the page ID, use Get pages and filter the results.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/VersionSortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested page versions are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Version>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PageVersion"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/pages/<id>/versions?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/pages/{page-id}/versions/{version-number}": {
      "get": {
        "tags": [
          "Version"
        ],
        "operationId": "getPageVersionDetails",
        "summary": "Get version details for page version",
        "description": "Retrieves version details for the specified page and version number.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the page.",
        "parameters": [
          {
            "name": "page-id",
            "in": "path",
            "required": true,
            "description": "The ID of the page for which version details should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "version-number",
            "in": "path",
            "required": true,
            "description": "The version number of the page to be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested version details are successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedVersion"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified page, the page was not found, or the version number does not exist.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/custom-content/{custom-content-id}/versions": {
      "get": {
        "tags": [
          "Version"
        ],
        "operationId": "getCustomContentVersions",
        "summary": "Get custom content versions",
        "description": "Returns the versions of specific custom content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the custom content and its corresponding page and space.",
        "parameters": [
          {
            "name": "custom-content-id",
            "in": "path",
            "required": true,
            "description": "The ID of the custom content to be queried for its versions. If you don't know the custom content ID, use Get custom-content by type and filter the results.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.\n\nNote: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.",
            "schema": {
              "$ref": "#/components/schemas/CustomContentBodyRepresentation"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/VersionSortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested custom content versions are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Version>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomContentVersion"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/custom-content/<id>/versions?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested custom content or the custom content was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/custom-content/{custom-content-id}/versions/{version-number}": {
      "get": {
        "tags": [
          "Version"
        ],
        "operationId": "getCustomContentVersionDetails",
        "summary": "Get version details for custom content version",
        "description": "Retrieves version details for the specified custom content and version number.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the page.",
        "parameters": [
          {
            "name": "custom-content-id",
            "in": "path",
            "required": true,
            "description": "The ID of the custom content for which version details should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "version-number",
            "in": "path",
            "required": true,
            "description": "The version number of the custom content to be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested version details are successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedVersion"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified custom content, the custom content was not found, or the version number does not exist.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/spaces": {
      "get": {
        "tags": [
          "Space"
        ],
        "operationId": "getSpaces",
        "summary": "Get spaces",
        "description": "Returns all spaces. The results will be sorted by id ascending. The number of results is limited by the `limit` parameter and\nadditional results (if available) will be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nOnly spaces that the user has permission to view will be returned.",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "description": "Filter the results to spaces based on their IDs. Multiple IDs can be specified as a comma-separated list.",
            "schema": {
              "type": "array",
              "maxItems": 250,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "keys",
            "in": "query",
            "required": false,
            "description": "Filter the results to spaces based on their keys. Multiple keys can be specified as a comma-separated list.",
            "schema": {
              "type": "array",
              "maxItems": 250,
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Filter the results to spaces based on their type.",
            "schema": {
              "type": "string",
              "enum": [
                "global",
                "personal"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "description": "Filter the results to spaces based on their status.",
            "schema": {
              "type": "string",
              "enum": [
                "current",
                "archived"
              ]
            }
          },
          {
            "name": "labels",
            "in": "query",
            "required": false,
            "description": "Filter the results to spaces based on their labels. Multiple labels can be specified as a comma-separated list.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/SpaceSortOrder"
            }
          },
          {
            "name": "description-format",
            "in": "query",
            "required": false,
            "description": "The content format type to be returned in the `description` field of the response. If available, the representation will be available under a response field of the same name under the `description` field.",
            "schema": {
              "$ref": "#/components/schemas/SpaceDescriptionBodyRepresentation"
            }
          },
          {
            "name": "include-icon",
            "in": "query",
            "required": false,
            "description": "If the icon for the space should be fetched or not.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of spaces per result to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested spaces are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Space>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Space"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/spaces?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:space:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/spaces/{id}": {
      "get": {
        "tags": [
          "Space"
        ],
        "operationId": "getSpaceById",
        "summary": "Get space by id",
        "description": "Returns a specific space.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the space to be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "description-format",
            "in": "query",
            "required": false,
            "description": "The content format type to be returned in the `description` field of the response. If available, the representation will be available under a response field of the same name under the `description` field.",
            "schema": {
              "$ref": "#/components/schemas/SpaceDescriptionBodyRepresentation"
            }
          },
          {
            "name": "include-icon",
            "in": "query",
            "required": false,
            "description": "If the icon for the space should be fetched or not.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested space is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Space"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested space or the space was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:space:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/spaces/{id}/blogposts": {
      "get": {
        "tags": [
          "Blog Post"
        ],
        "operationId": "getBlogPostsInSpace",
        "summary": "Get blog posts in space",
        "description": "Returns all blog posts in a space. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission) and view the space.\nOnly blog posts that the user has permission to view will be returned.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the space for which blog posts should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/BlogPostSortOrder"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "description": "Filter the results to blog posts based on their status. By default, `current` is used.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "current",
                  "deleted",
                  "trashed"
                ]
              }
            }
          },
          {
            "name": "title",
            "in": "query",
            "required": false,
            "description": "Filter the results to blog posts based on their title.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of blog posts per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested blog posts are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<BlogPost>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BlogPostBulk"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/spaces/<id>/blogposts?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified space or the space was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/spaces/{id}/custom-content": {
      "get": {
        "tags": [
          "Custom Content"
        ],
        "operationId": "getCustomContentByTypeInSpace",
        "summary": "Get custom content by type in space",
        "description": "Returns all custom content for a given type within a given space. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the custom content and the corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the space for which custom content should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "description": "The type of custom content being requested. See: https://developer.atlassian.com/cloud/confluence/custom-content/ for additional details on custom content.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.\n\nNote: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.",
            "schema": {
              "$ref": "#/components/schemas/CustomContentBodyRepresentation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested custom content is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<CustomContent>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomContentBulk"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/spaces/{id}/custom-content?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the space is not found. Returned if the type of custom content is not found. Note, this is distinct from the type being present, but no instances of the type, which would be a 200 with empty results."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/spaces/{id}/operations": {
      "get": {
        "tags": [
          "Operation"
        ],
        "operationId": "getSpaceOperations",
        "summary": "Get permitted operations for space",
        "description": "Returns the permitted operations on specific space.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the space for which operations should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested operations are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedOperationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspace or the it was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:space:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/spaces/{id}/pages": {
      "get": {
        "tags": [
          "Page"
        ],
        "operationId": "getPagesInSpace",
        "summary": "Get pages in space",
        "description": "Returns all pages in a space. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission) and 'View' permission for the space.\nOnly pages that the user has permission to view will be returned.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the space for which pages should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "description": "Filter the results to pages at the root level of the space or to all pages in the space.",
            "schema": {
              "type": "string",
              "default": "all",
              "enum": [
                "all",
                "root"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/PageSortOrder"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "description": "Filter the results to pages based on their status. By default, `current` and `archived` are used.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "current",
                  "archived",
                  "deleted",
                  "trashed"
                ]
              }
            }
          },
          {
            "name": "title",
            "in": "query",
            "required": false,
            "description": "Filter the results to pages based on their title.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested pages are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Page>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PageBulk"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/spaces/<id>/pages?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified space or the space was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/spaces/{space-id}/properties": {
      "get": {
        "tags": [
          "Space Properties"
        ],
        "operationId": "getSpaceProperties",
        "summary": "Get space properties in space",
        "description": "Returns all properties for the given space. Space properties are a key-value storage associated with a space.\nThe limit parameter specifies the maximum number of results returned in a single response. Use the `link` response header\nto paginate through additional results.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission) and 'View' permission for the space.",
        "parameters": [
          {
            "name": "space-id",
            "in": "path",
            "required": true,
            "description": "The ID of the space for which space properties should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "description": "The key of the space property to retrieve. This should be used when a user knows the key of their property, but needs to retrieve the id for use in other methods.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested space properties are returned. `results` may be empty if no results were found.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<SpaceProperty>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SpaceProperty"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string",
                  "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/spaces/<id>/properties?cursor=<opaque cursor token>>; rel=\"next\"`\n"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified space or the space was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:space:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "post": {
        "tags": [
          "Space Properties"
        ],
        "operationId": "createSpaceProperty",
        "summary": "Create space property in space",
        "description": "Creates a new space property.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.",
        "parameters": [
          {
            "name": "space-id",
            "in": "path",
            "required": true,
            "description": "The ID of the space for which space properties should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "The space property to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpacePropertyCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returned if the space property was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpaceProperty"
                }
              }
            },
            "headers": {
              "location": {
                "schema": {
                  "type": "string",
                  "description": "Returns the URL at which the space property is retrievable.\n"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified space or the space was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence",
              "write:space:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:space:confluence",
              "write:space:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      }
    },
    "/spaces/{space-id}/properties/{property-id}": {
      "get": {
        "tags": [
          "Space Properties"
        ],
        "operationId": "getSpacePropertyById",
        "summary": "Get space property by id",
        "description": "Retrieve a space property by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission) and 'View' permission for the space.",
        "parameters": [
          {
            "name": "space-id",
            "in": "path",
            "required": true,
            "description": "The ID of the space the property belongs to.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "property-id",
            "in": "path",
            "required": true,
            "description": "The ID of the property to be retrieved.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the space property was retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpaceProperty"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified space or the space was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:space:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "put": {
        "tags": [
          "Space Properties"
        ],
        "operationId": "updateSpacePropertyById",
        "summary": "Update space property by id",
        "description": "Update a space property by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.",
        "parameters": [
          {
            "name": "space-id",
            "in": "path",
            "required": true,
            "description": "The ID of the space the property belongs to.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "property-id",
            "in": "path",
            "required": true,
            "description": "The ID of the property to be updated.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "The space property to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpacePropertyUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the space property was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpaceProperty"
                }
              }
            },
            "headers": {
              "location": {
                "schema": {
                  "type": "string",
                  "description": "Returns the URL at which the space property is retrievable.\n"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified space or the space was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence",
              "write:space:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:space:confluence",
              "write:space:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      },
      "delete": {
        "tags": [
          "Space Properties"
        ],
        "operationId": "deleteSpacePropertyById",
        "summary": "Delete space property by id",
        "description": "Deletes a space property by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.",
        "parameters": [
          {
            "name": "space-id",
            "in": "path",
            "required": true,
            "description": "The ID of the space the property belongs to.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "property-id",
            "in": "path",
            "required": true,
            "description": "The ID of the property to be deleted.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the space property was deleted successfully."
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified space or the space was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:space:confluence",
              "write:space:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:space:confluence",
              "write:space:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      }
    },
    "/spaces/{id}/permissions": {
      "get": {
        "tags": [
          "Space Permissions"
        ],
        "operationId": "getSpacePermissions",
        "summary": "Get space permissions",
        "description": "Returns space permissions for a specific space.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the space to be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of spaces per result to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested space permissions are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<SpacePermission>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SpacePermission"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested space permissions or the space was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:permission:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:permission:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/pages/{id}/footer-comments": {
      "get": {
        "tags": [
          "Comment"
        ],
        "operationId": "getPageFooterComments",
        "summary": "Get footer comments for page",
        "description": "Returns the root footer comments of specific page. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the page for which footer comments should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "required": false,
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/CommentSortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested footer comments are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<PageCommentModel>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PageCommentModel"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/pages/<id>/footer-comments?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/pages/{id}/inline-comments": {
      "get": {
        "tags": [
          "Comment"
        ],
        "operationId": "getPageInlineComments",
        "summary": "Get inline comments for page",
        "description": "Returns the root inline comments of specific page. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the page for which inline comments should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "required": false,
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/CommentSortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of inline comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested inline comments are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<PageInlineCommentModel>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PageInlineCommentModel"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/pages/<id>/inline-comments?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested page or the page was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/blogposts/{id}/footer-comments": {
      "get": {
        "tags": [
          "Comment"
        ],
        "operationId": "getBlogPostFooterComments",
        "summary": "Get footer comments for blog post",
        "description": "Returns the root footer comments of specific blog post. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the blog post and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the blog post for which footer comments should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "required": false,
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/CommentSortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested footer comments are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<BlogPostCommentModel>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BlogPostCommentModel"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/blogposts/<id>/footer-comments?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested blog post or the blog post was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/blogposts/{id}/inline-comments": {
      "get": {
        "tags": [
          "Comment"
        ],
        "operationId": "getBlogPostInlineComments",
        "summary": "Get inline comments for blog post",
        "description": "Returns the root inline comments of specific blog post. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the blog post and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the blog post for which inline comments should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "required": false,
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/CommentSortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of inline comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested inline comments are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<BlogPostInlineCommentModel>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BlogPostInlineCommentModel"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/blogposts/<id>/inline-comments?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested blog post or the blog post was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/footer-comments": {
      "get": {
        "tags": [
          "Comment"
        ],
        "operationId": "getFooterComments",
        "summary": "Get footer comments",
        "description": "Returns all footer comments. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "parameters": [
          {
            "name": "body-format",
            "in": "query",
            "required": false,
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/CommentSortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested footer comments are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<FooterCommentModel>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InlineCommentModel"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/footer-comments/<id>/children?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "post": {
        "tags": [
          "Comment"
        ],
        "operationId": "createFooterComment",
        "summary": "Create footer comment",
        "description": "Create a footer comment. This can be at the top level (specifying pageId or blogPostId in the request body)\nor as a reply (specifying parentCommentId in the request body).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space. Permission to create comments in the space.",
        "requestBody": {
          "description": "The footer comment to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFooterCommentModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returned if the footer comment is created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FooterCommentModel"
                }
              }
            },
            "headers": {
              "location": {
                "schema": {
                  "type": "string"
                },
                "description": "Returns the URL at which the created footer comment is retrievable.\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if:\n- The page/blog post was not found\n- The calling user does not have permission to view the parent page/blog post\n- The user is forbidden from creating a comment tied to a resource they are allowed to view",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "write:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      }
    },
    "/footer-comments/{comment-id}": {
      "get": {
        "tags": [
          "Comment"
        ],
        "operationId": "getFooterCommentById",
        "summary": "Get footer comment by id",
        "description": "Retrieves a footer comment by id\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space.",
        "parameters": [
          {
            "name": "comment-id",
            "in": "path",
            "required": true,
            "description": "The ID of the comment to be retrieved.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "required": false,
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentationSingle"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the footer comment is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FooterCommentModel"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\ncomment or the comment was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "put": {
        "tags": [
          "Comment"
        ],
        "operationId": "updateFooterComment",
        "summary": "Update footer comment",
        "description": "Update a footer comment. This can be used to update the body text of a comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space. Permission to create comments in the space.",
        "parameters": [
          {
            "name": "comment-id",
            "in": "path",
            "required": true,
            "description": "The ID of the comment to be retrieved.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "The footer comment to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFooterCommentModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the footer comment is updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FooterCommentModel"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if:\n- The comment was not found\n- The calling user does not have permission to view the comment\n- The user is forbidden from updating a comment tied to a resource they are allowed to view"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "write:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      },
      "delete": {
        "tags": [
          "Comment"
        ],
        "operationId": "deleteFooterComment",
        "summary": "Delete footer comment",
        "description": "Deletes a footer comment. This is a permanent deletion and cannot be reverted.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space. Permission to delete comments in the space.",
        "parameters": [
          {
            "name": "comment-id",
            "in": "path",
            "required": true,
            "description": "The ID of the comment to be retrieved.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the footer comment is deleted."
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if:\n- The comment was not found\n- The calling user does not have permission to view the comment\n- The user is forbidden from deleting a comment tied to a resource they are allowed to view"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "delete:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "delete:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "DELETE"
      }
    },
    "/footer-comments/{id}/children": {
      "get": {
        "tags": [
          "Comment"
        ],
        "operationId": "getFooterCommentChildren",
        "summary": "Get children footer comments",
        "description": "Returns the children footer comments of specific comment. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the parent comment for which footer comment children should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "required": false,
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/CommentSortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested footer comments are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<ChildrenCommentModel>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChildrenCommentModel"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/footer-comments/<id>/children?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nparent page/blog post or the page/blog post was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/footer-comments/{id}/likes/count": {
      "get": {
        "tags": [
          "Like"
        ],
        "operationId": "getFooterLikeCount",
        "summary": "Get like count for footer comment",
        "description": "Returns the count of likes of specific footer comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page/blogpost and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the footer comment for which like count should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested count is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Integer",
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The count number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the comment or the comment was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/footer-comments/{id}/likes/users": {
      "get": {
        "tags": [
          "Like"
        ],
        "operationId": "getFooterLikeUsers",
        "summary": "Get account IDs of likes for footer comment",
        "description": "Returns the account IDs of likes of specific footer comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page/blogpost and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the footer comment for which like count should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of account IDs per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 0,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested account IDs are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<String>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Like"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/footer-comments/<id>/likes/users?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the comment or the comment was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/footer-comments/{id}/operations": {
      "get": {
        "tags": [
          "Operation"
        ],
        "operationId": "getFooterCommentOperations",
        "summary": "Get permitted operations for footer comment",
        "description": "Returns the permitted operations on specific footer comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the parent content of the footer comment and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the footer comment for which operations should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested operations are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedOperationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nparent content of the requested footer comment or the it was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/footer-comments/{id}/versions": {
      "get": {
        "tags": [
          "Version"
        ],
        "operationId": "getFooterCommentVersions",
        "summary": "Get footer comment versions",
        "description": "Retrieves the versions of the specified footer comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blog post and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the footer comment for which versions should be returned",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/VersionSortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested footer comment versions are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Version>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CommentVersion"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/footer-comments/<id>/versions?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the specified page\nor blog post, the footer comment was not found, or the version number does not exist.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/footer-comments/{id}/versions/{version-number}": {
      "get": {
        "tags": [
          "Version"
        ],
        "operationId": "getFooterCommentVersionDetails",
        "summary": "Get version details for footer comment version",
        "description": "Retrieves version details for the specified footer comment version.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blog post and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the footer comment for which version details should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "version-number",
            "in": "path",
            "required": true,
            "description": "The version number of the footer comment to be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested version details are successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedVersion"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the specified page\nor blog post, the footer comment was not found, or the version number does not exist.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/inline-comments": {
      "get": {
        "tags": [
          "Comment"
        ],
        "operationId": "getInlineComments",
        "summary": "Get inline comments",
        "description": "Returns all inline comments. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "parameters": [
          {
            "name": "body-format",
            "in": "query",
            "required": false,
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/CommentSortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested inline comments are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<InlineCommentModel>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InlineCommentModel"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/inline-comments/<id>/children?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "post": {
        "tags": [
          "Comment"
        ],
        "operationId": "createInlineComment",
        "summary": "Create inline comment",
        "description": "Create an inline comment. This can be at the top level (specifying pageId or blogPostId in the request body)\nor as a reply (specifying parentCommentId in the request body). Note the inlineCommentProperties object in the\nrequest body is used to select the text the inline comment should be tied to. This is what determines the text \nhighlighting when viewing a page in Confluence.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space. Permission to create comments in the space.",
        "requestBody": {
          "description": "The inline comment to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInlineCommentModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returned if the inline comment is created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineCommentModel"
                }
              }
            },
            "headers": {
              "location": {
                "schema": {
                  "type": "string"
                },
                "description": "Returns the URL at which the created inline comment is retrievable.\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if:\n- The page/blog post was not found\n- The calling user does not have permission to view the parent page/blog post\n- The user is forbidden from creating a comment tied to a resource they are allowed to view",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "write:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      }
    },
    "/inline-comments/{comment-id}": {
      "get": {
        "tags": [
          "Comment"
        ],
        "operationId": "getInlineCommentById",
        "summary": "Get inline comment by id",
        "description": "Retrieves an inline comment by id\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space.",
        "parameters": [
          {
            "name": "comment-id",
            "in": "path",
            "required": true,
            "description": "The ID of the comment to be retrieved.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "required": false,
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentationSingle"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the inline comment is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineCommentModel"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\ncomment or the comment was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "put": {
        "tags": [
          "Comment"
        ],
        "operationId": "updateInlineComment",
        "summary": "Update inline comment",
        "description": "Update an inline comment. This can be used to update the body text of a comment and/or to resolve the comment\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space. Permission to create comments in the space.",
        "parameters": [
          {
            "name": "comment-id",
            "in": "path",
            "required": true,
            "description": "The ID of the comment to be retrieved.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "The inline comment to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInlineCommentModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the inline comment is updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InlineCommentModel"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if:\n- The comment was not found\n- The calling user does not have permission to view the comment\n- The user is forbidden from updating a comment tied to a resource they are allowed to view",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "write:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      },
      "delete": {
        "tags": [
          "Comment"
        ],
        "operationId": "deleteInlineComment",
        "summary": "Delete inline comment",
        "description": "Deletes an inline comment. This is a permanent deletion and cannot be reverted.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blogpost and its corresponding space. Permission to delete comments in the space.",
        "parameters": [
          {
            "name": "comment-id",
            "in": "path",
            "required": true,
            "description": "The ID of the comment to be deleted.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the inline comment is deleted."
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if:\n- The comment was not found\n- The calling user does not have permission to view the comment\n- The user is forbidden from deleting a comment tied to a resource they are allowed to view",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "delete:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "delete:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "DELETE"
      }
    },
    "/inline-comments/{id}/children": {
      "get": {
        "tags": [
          "Comment"
        ],
        "operationId": "getInlineCommentChildren",
        "summary": "Get children inline comments",
        "description": "Returns the children inline comments of specific comment. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the parent comment for which inline comment children should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "required": false,
            "description": "The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/CommentSortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested footer comments are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<InlineCommentChildrenModel>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InlineCommentChildrenModel"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/inline-comments/<id>/children?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nparent page/blog post or the page/blog post was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/inline-comments/{id}/likes/count": {
      "get": {
        "tags": [
          "Like"
        ],
        "operationId": "getInlineLikeCount",
        "summary": "Get like count for inline comment",
        "description": "Returns the count of likes of specific inline comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page/blogpost and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the inline comment for which like count should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested count is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Integer",
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The count number"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the comment or the comment was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/inline-comments/{id}/likes/users": {
      "get": {
        "tags": [
          "Like"
        ],
        "operationId": "getInlineLikeUsers",
        "summary": "Get account IDs of likes for inline comment",
        "description": "Returns the account IDs of likes of specific inline comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page/blogpost and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the inline comment for which like count should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of account IDs per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 0,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested account IDs are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<String>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Like"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/inline-comments/<id>/likes/users?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the comment or the comment was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/inline-comments/{id}/operations": {
      "get": {
        "tags": [
          "Operation"
        ],
        "operationId": "getInlineCommentOperations",
        "summary": "Get permitted operations for inline comment",
        "description": "Returns the permitted operations on specific inline comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the parent content of the inline comment and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the inline comment for which operations should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested operations are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermittedOperationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nparent content of the requested inline comment or the it was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/inline-comments/{id}/versions": {
      "get": {
        "tags": [
          "Version"
        ],
        "operationId": "getInlineCommentVersions",
        "summary": "Get inline comment versions",
        "description": "Retrieves the versions of the specified inline comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blog post and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the inline comment for which versions should be returned",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/VersionSortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested inline comment versions are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Version>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CommentVersion"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/inline-comments/<id>/versions?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the specified page\nor blog post, the inline comment was not found, or the version number does not exist.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/inline-comments/{id}/versions/{version-number}": {
      "get": {
        "tags": [
          "Version"
        ],
        "operationId": "getInlineCommentVersionDetails",
        "summary": "Get version details for inline comment version",
        "description": "Retrieves version details for the specified inline comment version.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the content of the page or blog post and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the inline comment for which version details should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "version-number",
            "in": "path",
            "required": true,
            "description": "The version number of the inline comment to be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested version details are successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedVersion"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the specified page\nor blog post, the inline comment was not found, or the version number does not exist.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/comments/{comment-id}/properties": {
      "get": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "getCommentContentProperties",
        "summary": "Get content properties for comment",
        "description": "Retrieves Content Properties attached to a specified comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the comment.",
        "parameters": [
          {
            "name": "comment-id",
            "in": "path",
            "required": true,
            "description": "The ID of the comment for which content properties should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "description": "Filters the response to return a specific content property with matching key (case sensitive).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "$ref": "#/components/schemas/ContentPropertySortOrder"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested content properties are successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<ContentProperty>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContentProperty"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/comments/<comment-id>/properties?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified comment or the comment was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "post": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "createCommentProperty",
        "summary": "Create content property for comment",
        "description": "Creates a new content property for a comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to update the comment.",
        "parameters": [
          {
            "name": "comment-id",
            "in": "path",
            "required": true,
            "description": "The ID of the comment to create a property for.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "The content property to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the content property was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified page or the page was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence",
              "write:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence",
              "write:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      }
    },
    "/comments/{comment-id}/properties/{property-id}": {
      "get": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "getCommentContentPropertiesById",
        "summary": "Get content property for comment by id",
        "description": "Retrieves a specific Content Property by ID that is attached to a specified comment.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the comment.",
        "parameters": [
          {
            "name": "comment-id",
            "in": "path",
            "required": true,
            "description": "The ID of the comment for which content properties should be returned.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "property-id",
            "in": "path",
            "required": true,
            "description": "The ID of the content property being requested.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested content property is successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified comment, the comment was not found, or the property was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "put": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "updateCommentPropertyById",
        "summary": "Update content property for comment by id",
        "description": "Update a content property for a comment by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the comment.",
        "parameters": [
          {
            "name": "comment-id",
            "in": "path",
            "required": true,
            "description": "The ID of the comment the property belongs to.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "property-id",
            "in": "path",
            "required": true,
            "description": "The ID of the property to be updated.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "The content property to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPropertyUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returned if the content property was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentProperty"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified comment or the comment was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence",
              "write:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence",
              "write:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      },
      "delete": {
        "tags": [
          "Content Properties"
        ],
        "operationId": "deleteCommentPropertyById",
        "summary": "Delete content property for comment by id",
        "description": "Deletes a content property for a comment by its id. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the comment.",
        "parameters": [
          {
            "name": "comment-id",
            "in": "path",
            "required": true,
            "description": "The ID of the comment the property belongs to.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "property-id",
            "in": "path",
            "required": true,
            "description": "The ID of the property to be deleted.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the content property was deleted successfully."
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified comment or the comment was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:comment:confluence",
              "write:comment:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:comment:confluence",
              "write:comment:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      }
    },
    "/tasks": {
      "get": {
        "tags": [
          "Task"
        ],
        "operationId": "getTasks",
        "summary": "Get tasks",
        "description": "Returns all tasks. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nOnly tasks that the user has permission to view will be returned.",
        "parameters": [
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          },
          {
            "name": "include-blank-tasks",
            "in": "query",
            "description": "Specifies whether to include blank tasks in the response. Defaults to `true`.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters on the status of the task.",
            "schema": {
              "type": "string",
              "enum": [
                "complete",
                "incomplete"
              ]
            }
          },
          {
            "name": "task-id",
            "in": "query",
            "required": false,
            "description": "Filters on task ID. Multiple IDs can be specified.",
            "schema": {
              "type": "array",
              "maxItems": 250,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "space-id",
            "in": "query",
            "description": "Filters on the space ID of the task. Multiple IDs can be specified.",
            "schema": {
              "type": "array",
              "maxItems": 250,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "page-id",
            "in": "query",
            "description": "Filters on the page ID of the task. Multiple IDs can be specified. Note - page and blog post filters can be used in conjunction.",
            "schema": {
              "type": "array",
              "maxItems": 250,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "blogpost-id",
            "in": "query",
            "description": "Filters on the blog post ID of the task. Multiple IDs can be specified. Note - page and blog post filters can be used in conjunction.",
            "schema": {
              "type": "array",
              "maxItems": 250,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "created-by",
            "in": "query",
            "description": "Filters on the Account ID of the user who created this task. Multiple IDs can be specified.",
            "schema": {
              "type": "array",
              "maxItems": 250,
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "assigned-to",
            "in": "query",
            "description": "Filters on the Account ID of the user to whom this task is assigned. Multiple IDs can be specified.",
            "schema": {
              "type": "array",
              "maxItems": 250,
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "completed-by",
            "in": "query",
            "description": "Filters on the Account ID of the user who completed this task. Multiple IDs can be specified.",
            "schema": {
              "type": "array",
              "maxItems": 250,
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "created-at-from",
            "in": "query",
            "description": "Filters on start of date-time range of task based on creation date (inclusive). Input is epoch time in milliseconds.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "created-at-to",
            "in": "query",
            "description": "Filters on end of date-time range of task based on creation date (inclusive). Input is epoch time in milliseconds.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "due-at-from",
            "in": "query",
            "description": "Filters on start of date-time range of task based on due date (inclusive). Input is epoch time in milliseconds.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "due-at-to",
            "in": "query",
            "description": "Filters on end of date-time range of task based on due date (inclusive). Input is epoch time in milliseconds.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "completed-at-from",
            "in": "query",
            "description": "Filters on start of date-time range of task based on completion date (inclusive). Input is epoch time in milliseconds.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "completed-at-to",
            "in": "query",
            "description": "Filters on end of date-time range of task based on completion date (inclusive). Input is epoch time in milliseconds.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of tasks per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested tasks are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Task>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/tasks?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:task:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:task:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/tasks/{id}": {
      "get": {
        "tags": [
          "Task"
        ],
        "operationId": "getTaskById",
        "summary": "Get task by id",
        "description": "Returns a specific task. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to view the containing page or blog post and its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the task to be returned. If you don't know the task ID, use Get tasks and filter the results.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "body-format",
            "in": "query",
            "description": "The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.",
            "schema": {
              "$ref": "#/components/schemas/PrimaryBodyRepresentation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested task is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nrequested task or the task was not found.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:task:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:task:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      },
      "put": {
        "tags": [
          "Task"
        ],
        "operationId": "updateTask",
        "summary": "Update task",
        "description": "Update a task by id.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to edit the containing page or blog post and view its corresponding space.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the task to be updated. If you don't know the task ID, use Get tasks and filter the results.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TaskUpdateRequest"
        },
        "responses": {
          "200": {
            "description": "Returned if the requested task is updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing from the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if:\n- The provided task does not exist\n- The user does not have permissions to view the task\n- The user does not have the needed permissions to update the containing page or blog post in the corresponding space",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "write:task:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "write:task:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "WRITE"
      }
    },
    "/pages/{id}/children": {
      "get": {
        "tags": [
          "Children"
        ],
        "operationId": "getChildPages",
        "summary": "Get child pages",
        "description": "Returns all child pages for given page id. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nOnly pages that the user has permission to view will be returned.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the parent page. If you don't know the page ID, use Get pages and filter the results.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "type": "string",
              "items": {
                "$ref": "#/components/schemas/ChildPageSortOrder"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested child pages are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<ChildPage>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChildPage"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/pages/{id}/children?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:page:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/custom-content/{id}/children": {
      "get": {
        "tags": [
          "Children"
        ],
        "operationId": "getChildCustomContent",
        "summary": "Get child custom content",
        "description": "Returns all child custom content for given custom content id. The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available through the `next` URL present in the `Link` response header.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nOnly custom content that the user has permission to view will be returned.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the parent custom content. If you don't know the custom content ID, use Get custom-content and filter the results.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Used to sort the result by a particular field.",
            "schema": {
              "type": "string",
              "items": {
                "$ref": "#/components/schemas/ChildCustomContentSortOrder"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested child custom content are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<ChildCustomContent>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChildCustomContent"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.\nThis property will not be present if there is no additional data available."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "schema": {
                  "type": "string"
                },
                "description": "Used for pagination. This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel=\"next\" would be the URL necessary to get the next page of information. If there are no additional results, this header will not be returned. Example response header format: `Link: </wiki/api/v2/custom-content/{id}/children?cursor=<opaque cursor token>>; rel=\"next\"`\n"
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:custom-content:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/pages/{id}/ancestors": {
      "get": {
        "tags": [
          "Ancestors"
        ],
        "operationId": "getPageAncestors",
        "summary": "Get all ancestors of page",
        "description": "Returns all ancestors for a given page by ID in top-to-bottom order (that is, the highest ancestor is the first\nitem in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)\nwill be available by calling this endpoint with the ID of first ancestor in the response payload.\n\nThis endpoint returns minimal information about each ancestor. To fetch more details, use a related endpoint, such\nas [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the page.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of pages per result to return. If more results exist, call this endpoint with the highest ancestor's ID to fetch the next set of results.",
            "schema": {
              "format": "int32",
              "default": 25,
              "minimum": 1,
              "maximum": 250,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested ancestors are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEntityResult<Ancestor>",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Ancestor"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the\nspecified page or the page was not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:content.metadata:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:content.metadata:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "READ"
      }
    },
    "/user/access/check-access-by-email": {
      "post": {
        "tags": [
          "User"
        ],
        "operationId": "checkAccessByEmail",
        "summary": "Check site access for a list of emails",
        "description": "Returns the list of emails from the input list that do not have access to site.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).",
        "requestBody": {
          "$ref": "#/components/requestBodies/CheckAccessOrInviteByEmailRequest"
        },
        "responses": {
          "200": {
            "description": "Returns object with list of emails without access to site.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "emailsWithoutAccess": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of emails that do not have access to site."
                    },
                    "invalidEmails": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of invalid emails provided in the request."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to check access for emails on site."
          },
          "503": {
            "description": "Returned if API is disabled on site"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:configuration:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:configuration:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "NONE",
        "x-experimental": true
      }
    },
    "/user/access/invite-by-email": {
      "post": {
        "tags": [
          "User"
        ],
        "operationId": "inviteByEmail",
        "summary": "Invite a list of emails to the site",
        "description": "Invite a list of emails to the site.\n\nIgnores all invalid emails and no action is taken for the emails that already have access to the site.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).",
        "requestBody": {
          "$ref": "#/components/requestBodies/CheckAccessOrInviteByEmailRequest"
        },
        "responses": {
          "200": {
            "description": "Returns object with list of emails without access to site.",
            "content": {}
          },
          "400": {
            "description": "Returned if an invalid request is provided.",
            "content": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing\nfrom the request.",
            "content": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to check access for emails on site."
          },
          "503": {
            "description": "Returned if API is disabled on site"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "oAuthDefinitions": [
              "read:configuration:confluence"
            ]
          }
        ],
        "x-atlassian-oauth2-scopes": [
          {
            "scheme": "oAuthDefinitions",
            "state": "Current",
            "scopes": [
              "read:configuration:confluence"
            ]
          }
        ],
        "x-atlassian-connect-scope": "NONE",
        "x-experimental": true
      }
    }
  },
  "components": {
    "requestBodies": {
      "BlogPostCreateRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "spaceId"
              ],
              "properties": {
                "spaceId": {
                  "type": "string",
                  "description": "ID of the space"
                },
                "status": {
                  "enum": [
                    "current",
                    "draft"
                  ],
                  "type": "string",
                  "description": "The status of the blog post, specifies if the blog post will be created as a new blog post or a draft"
                },
                "title": {
                  "type": "string",
                  "description": "Title of the blog post, required if creating non-draft."
                },
                "body": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BlogPostBodyWrite"
                    },
                    {
                      "$ref": "#/components/schemas/BlogPostNestedBodyWrite"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "BlogPostUpdateRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "id",
                "status",
                "title",
                "body",
                "version"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Id of the blog post."
                },
                "status": {
                  "enum": [
                    "current",
                    "draft",
                    "deleted"
                  ],
                  "type": "string",
                  "description": "The status of the blog post."
                },
                "title": {
                  "type": "string",
                  "description": "Title of the blog post."
                },
                "spaceId": {
                  "type": "string",
                  "description": "ID of the containing space.\n\nThis currently **does not support moving the blog post to a different space**."
                },
                "body": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BlogPostBodyWrite"
                    },
                    {
                      "$ref": "#/components/schemas/BlogPostNestedBodyWrite"
                    }
                  ]
                },
                "version": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "format": "int32",
                      "type": "integer",
                      "description": "The version number, must be incremented by one."
                    },
                    "message": {
                      "type": "string",
                      "description": "An optional message to be stored with the version."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ContentIdToContentTypeRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "contentIds"
              ],
              "properties": {
                "contentIds": {
                  "description": "The content ids to convert. They may be provided as strings or numbers.",
                  "type": "array",
                  "maxItems": 100,
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "CustomContentCreateRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "body",
                "title",
                "type"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Type of custom content."
                },
                "status": {
                  "enum": [
                    "current"
                  ],
                  "type": "string",
                  "description": "The status of the custom content"
                },
                "spaceId": {
                  "type": "string",
                  "description": "ID of the containing space"
                },
                "pageId": {
                  "type": "string",
                  "description": "ID of the containing page"
                },
                "blogPostId": {
                  "type": "string",
                  "description": "ID of the containing Blog Post"
                },
                "customContentId": {
                  "type": "string",
                  "description": "ID of the containing custom content"
                },
                "title": {
                  "type": "string",
                  "description": "Title of the custom content"
                },
                "body": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CustomContentBodyWrite"
                    },
                    {
                      "$ref": "#/components/schemas/CustomContentNestedBodyWrite"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "CustomContentUpdateRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "body",
                "id",
                "status",
                "title",
                "type",
                "version"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Id of custom content."
                },
                "type": {
                  "type": "string",
                  "description": "Type of custom content."
                },
                "status": {
                  "enum": [
                    "current"
                  ],
                  "type": "string",
                  "description": "The status of the custom content"
                },
                "spaceId": {
                  "type": "string",
                  "description": "ID of the containing space"
                },
                "pageId": {
                  "type": "string",
                  "description": "ID of the containing page"
                },
                "blogPostId": {
                  "type": "string",
                  "description": "ID of the containing Blog Post"
                },
                "customContentId": {
                  "type": "string",
                  "description": "ID of the containing custom content"
                },
                "title": {
                  "type": "string",
                  "description": "Title of the custom content"
                },
                "body": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CustomContentBodyWrite"
                    },
                    {
                      "$ref": "#/components/schemas/CustomContentNestedBodyWrite"
                    }
                  ]
                },
                "version": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "format": "int32",
                      "type": "integer",
                      "description": "The version number, must be incremented by one."
                    },
                    "message": {
                      "type": "string",
                      "description": "An optional message to be stored with the version."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PageCreateRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "spaceId"
              ],
              "properties": {
                "spaceId": {
                  "type": "string",
                  "description": "ID of the space"
                },
                "status": {
                  "enum": [
                    "current",
                    "draft"
                  ],
                  "type": "string",
                  "description": "The status of the page, published or draft."
                },
                "title": {
                  "type": "string",
                  "description": "Title of the page, required if page status is not draft."
                },
                "parentId": {
                  "type": "string",
                  "description": "The parent content ID of the page."
                },
                "body": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PageBodyWrite"
                    },
                    {
                      "$ref": "#/components/schemas/PageNestedBodyWrite"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "PageUpdateRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "id",
                "status",
                "title",
                "body",
                "version"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Id of the page."
                },
                "status": {
                  "enum": [
                    "current",
                    "draft",
                    "archived",
                    "deleted"
                  ],
                  "type": "string",
                  "description": "The status of the page."
                },
                "title": {
                  "type": "string",
                  "description": "Title of the page."
                },
                "spaceId": {
                  "format": "string",
                  "description": "ID of the containing space.\n\nThis currently **does not support moving the page to a different space**."
                },
                "parentId": {
                  "format": "string",
                  "description": "ID of the parent page.\n\nThis allows the page to be moved under a different parent within the same space."
                },
                "body": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PageBodyWrite"
                    },
                    {
                      "$ref": "#/components/schemas/PageNestedBodyWrite"
                    }
                  ]
                },
                "version": {
                  "type": "object",
                  "properties": {
                    "number": {
                      "format": "int32",
                      "type": "integer",
                      "description": "The version number, must be incremented by one."
                    },
                    "message": {
                      "type": "string",
                      "description": "An optional message to be stored with the version."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "TaskUpdateRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID of the task."
                },
                "localId": {
                  "type": "string",
                  "description": "Local ID of the task. This ID is local to the corresponding page or blog post."
                },
                "spaceId": {
                  "type": "string",
                  "description": "ID of the space the task is in."
                },
                "pageId": {
                  "type": "string",
                  "description": "ID of the page the task is in."
                },
                "blogPostId": {
                  "type": "string",
                  "description": "ID of the blog post the task is in."
                },
                "status": {
                  "enum": [
                    "complete",
                    "incomplete"
                  ],
                  "type": "string",
                  "description": "Status of the task."
                },
                "createdBy": {
                  "type": "string",
                  "description": "Account ID of the user who created this task."
                },
                "assignedTo": {
                  "type": "string",
                  "description": "Account ID of the user to whom this task is assigned."
                },
                "completedBy": {
                  "type": "string",
                  "description": "Account ID of the user who completed this task."
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date and time when the task was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date and time when the task was updated. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
                },
                "dueAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date and time when the task is due. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
                },
                "completedAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date and time when the task was completed. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
                }
              }
            }
          }
        }
      },
      "CheckAccessOrInviteByEmailRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "emails"
              ],
              "properties": {
                "emails": {
                  "nullable": false,
                  "description": "List of emails to check access to site.",
                  "type": "array",
                  "minItems": 1,
                  "maxItems": 100,
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "Attachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the attachment."
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "type": "string",
            "description": "Title of the comment."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the attachment was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
          },
          "pageId": {
            "type": "string",
            "description": "ID of the containing page.\n\nNote: This is only returned if the attachment has a container that is a page."
          },
          "blogPostId": {
            "type": "string",
            "description": "ID of the containing blog post.\n\nNote: This is only returned if the attachment has a container that is a blog post."
          },
          "customContentId": {
            "type": "string",
            "description": "ID of the containing custom content.\n\nNote: This is only returned if the attachment has a container that is custom content."
          },
          "mediaType": {
            "type": "string",
            "description": "Media Type for the attachment."
          },
          "mediaTypeDescription": {
            "type": "string",
            "description": "Media Type description for the attachment."
          },
          "comment": {
            "type": "string",
            "description": "Comment for the attachment."
          },
          "fileId": {
            "type": "string",
            "description": "File ID of the attachment. This is the ID referenced in `atlas_doc_format` bodies and is distinct from the attachment ID."
          },
          "fileSize": {
            "format": "int64",
            "type": "integer",
            "description": "File size of the attachment."
          },
          "webuiLink": {
            "type": "string",
            "description": "WebUI link of the attachment."
          },
          "downloadLink": {
            "type": "string",
            "description": "Download link of the attachment."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "_links": {
            "$ref": "#/components/schemas/AttachmentLinks"
          }
        }
      },
      "BlogPostSingle": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the blog post."
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "type": "string",
            "description": "Title of the blog post."
          },
          "spaceId": {
            "type": "string",
            "description": "ID of the space the blog post is in."
          },
          "authorId": {
            "type": "string",
            "description": "The account ID of the user who created this blog post originally."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the blog post was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "body": {
            "$ref": "#/components/schemas/BodySingle"
          },
          "_links": {
            "$ref": "#/components/schemas/AbstractPageLinks"
          }
        }
      },
      "BlogPostBulk": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the blog post."
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "type": "string",
            "description": "Title of the blog post."
          },
          "spaceId": {
            "type": "string",
            "description": "ID of the space the blog post is in."
          },
          "authorId": {
            "type": "string",
            "description": "The account ID of the user who created this blog post originally."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the blog post was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "body": {
            "$ref": "#/components/schemas/BodyBulk"
          },
          "_links": {
            "$ref": "#/components/schemas/AbstractPageLinks"
          }
        }
      },
      "BodySingle": {
        "type": "object",
        "description": "Contains fields for each representation type requested.",
        "properties": {
          "storage": {
            "$ref": "#/components/schemas/BodyType"
          },
          "atlas_doc_format": {
            "$ref": "#/components/schemas/BodyType"
          },
          "view": {
            "$ref": "#/components/schemas/BodyType"
          }
        }
      },
      "BodyBulk": {
        "type": "object",
        "description": "Contains fields for each representation type requested.",
        "properties": {
          "storage": {
            "$ref": "#/components/schemas/BodyType"
          },
          "atlas_doc_format": {
            "$ref": "#/components/schemas/BodyType"
          }
        }
      },
      "BodyType": {
        "type": "object",
        "properties": {
          "representation": {
            "type": "string",
            "description": "Type of content representation used for the value field."
          },
          "value": {
            "type": "string",
            "description": "Body of the content, in the format found in the representation field."
          }
        }
      },
      "PrimaryBodyRepresentation": {
        "enum": [
          "storage",
          "atlas_doc_format"
        ],
        "type": "string",
        "description": "The primary formats a body can be represented as. A subset of BodyRepresentation. These formats are the only allowed formats in certain use cases."
      },
      "PrimaryBodyRepresentationSingle": {
        "enum": [
          "storage",
          "atlas_doc_format",
          "view",
          "export_view",
          "anonymous_export_view"
        ],
        "type": "string",
        "description": "The primary formats a body can be represented as. A subset of BodyRepresentation. These formats are the only allowed formats in certain use cases."
      },
      "CustomContentBodyRepresentation": {
        "enum": [
          "raw",
          "storage",
          "atlas_doc_format"
        ],
        "type": "string",
        "description": "The formats a custom content body can be represented as. A subset of BodyRepresentation."
      },
      "CustomContentBodyRepresentationSingle": {
        "enum": [
          "raw",
          "storage",
          "atlas_doc_format",
          "view",
          "export_view",
          "anonymous_export_view"
        ],
        "type": "string",
        "description": "The formats a custom content body can be represented as. A subset of BodyRepresentation."
      },
      "SpaceDescriptionBodyRepresentation": {
        "enum": [
          "plain",
          "view"
        ],
        "type": "string",
        "description": "The formats a space description can be represented as. A subset of BodyRepresentation."
      },
      "ContentIdToContentTypeResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "object",
            "description": "JSON object containing all requested content ids as keys and their associated content types as the values.\nDuplicate content ids in the request will be returned under a single key in the response. For built-in content\ntypes, the enumerations are as specified. Custom content ids will be mapped to their associated type.",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string",
                  "description": "Built in content types",
                  "enum": [
                    "page",
                    "blogpost",
                    "attachment",
                    "footer-comment",
                    "inline-comment"
                  ]
                },
                {
                  "type": "string",
                  "description": "Custom content types"
                }
              ]
            }
          }
        }
      },
      "ContentStatus": {
        "enum": [
          "current",
          "trashed",
          "historical",
          "deleted",
          "any",
          "draft",
          "archived"
        ],
        "type": "string",
        "description": "The status of the content."
      },
      "OnlyArchivedAndCurrentContentStatus": {
        "enum": [
          "current",
          "archived"
        ],
        "type": "string",
        "description": "The status of the content."
      },
      "ContentProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the property"
          },
          "key": {
            "type": "string",
            "description": "Key of the property"
          },
          "value": {
            "description": "Value of the property. Must be a valid JSON value."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        }
      },
      "ContentPropertyCreateRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key of the content property"
          },
          "value": {
            "description": "Value of the content property."
          }
        }
      },
      "ContentPropertyUpdateRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key of the content property"
          },
          "value": {
            "description": "Value of the content property."
          },
          "version": {
            "type": "object",
            "description": "New version number and associated message",
            "properties": {
              "number": {
                "type": "integer",
                "format": "int32",
                "description": "Version number of the new version. Should be 1 more than the current version number."
              },
              "message": {
                "type": "string",
                "description": "Message to be associated with the new version."
              }
            }
          }
        }
      },
      "CustomContentSingle": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the custom content."
          },
          "type": {
            "type": "string",
            "description": "The type of custom content."
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "type": "string",
            "description": "Title of the custom content."
          },
          "spaceId": {
            "type": "string",
            "description": "ID of the space the custom content is in.\n\nNote: This is always returned, regardless of if the custom content has a container that is a space."
          },
          "pageId": {
            "type": "string",
            "description": "ID of the containing page.\n\nNote: This is only returned if the custom content has a container that is a page."
          },
          "blogPostId": {
            "type": "string",
            "description": "ID of the containing blog post.\n\nNote: This is only returned if the custom content has a container that is a blog post."
          },
          "customContentId": {
            "type": "string",
            "description": "ID of the containing custom content.\n\nNote: This is only returned if the custom content has a container that is custom content."
          },
          "authorId": {
            "type": "string",
            "description": "The account ID of the user who created this custom content originally."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the custom content was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "body": {
            "$ref": "#/components/schemas/CustomContentBodySingle"
          },
          "_links": {
            "$ref": "#/components/schemas/CustomContentLinks"
          }
        }
      },
      "CustomContentBulk": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the custom content."
          },
          "type": {
            "type": "string",
            "description": "The type of custom content."
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "type": "string",
            "description": "Title of the custom content."
          },
          "spaceId": {
            "type": "string",
            "description": "ID of the space the custom content is in.\n\nNote: This is always returned, regardless of if the custom content has a container that is a space."
          },
          "pageId": {
            "type": "string",
            "description": "ID of the containing page.\n\nNote: This is only returned if the custom content has a container that is a page."
          },
          "blogPostId": {
            "type": "string",
            "description": "ID of the containing blog post.\n\nNote: This is only returned if the custom content has a container that is a blog post."
          },
          "customContentId": {
            "type": "string",
            "description": "ID of the containing custom content.\n\nNote: This is only returned if the custom content has a container that is custom content."
          },
          "authorId": {
            "type": "string",
            "description": "The account ID of the user who created this custom content originally."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the custom content was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "body": {
            "$ref": "#/components/schemas/CustomContentBodyBulk"
          },
          "_links": {
            "$ref": "#/components/schemas/CustomContentLinks"
          }
        }
      },
      "CustomContentBodySingle": {
        "type": "object",
        "description": "Contains fields for each representation type requested.",
        "properties": {
          "raw": {
            "$ref": "#/components/schemas/BodyType"
          },
          "storage": {
            "$ref": "#/components/schemas/BodyType"
          },
          "atlas_doc_format": {
            "$ref": "#/components/schemas/BodyType"
          },
          "view": {
            "$ref": "#/components/schemas/BodyType"
          }
        }
      },
      "CustomContentBodyBulk": {
        "type": "object",
        "description": "Contains fields for each representation type requested.",
        "properties": {
          "raw": {
            "$ref": "#/components/schemas/BodyType"
          },
          "storage": {
            "$ref": "#/components/schemas/BodyType"
          },
          "atlas_doc_format": {
            "$ref": "#/components/schemas/BodyType"
          }
        }
      },
      "DetailedVersion": {
        "type": "object",
        "properties": {
          "number": {
            "format": "int32",
            "type": "integer",
            "description": "The current version number."
          },
          "authorId": {
            "type": "string",
            "description": "The account ID of the user who created this version."
          },
          "message": {
            "type": "string",
            "description": "Message associated with the current version."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the version was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
          },
          "minorEdit": {
            "type": "boolean",
            "description": "Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions."
          },
          "contentTypeModified": {
            "type": "boolean",
            "description": "Describes if the content type is modified in this version (e.g. page to blog)"
          },
          "collaborators": {
            "type": "array",
            "description": "The account IDs of users that collaborated on this version.",
            "items": {
              "type": "string"
            }
          },
          "prevVersion": {
            "format": "int32",
            "type": "integer",
            "description": "The version number of the version prior to this current content update."
          },
          "nextVersion": {
            "format": "int32",
            "type": "integer",
            "description": "The version number of the version after this current content update."
          }
        }
      },
      "Label": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the label."
          },
          "name": {
            "type": "string",
            "description": "Name of the label."
          },
          "prefix": {
            "type": "string",
            "description": "Prefix of the label."
          }
        }
      },
      "Like": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "Account ID."
          }
        }
      },
      "PermittedOperationsResponse": {
        "description": "The list of operations permitted on entity.",
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "operation": {
                  "description": "The type of operation.",
                  "type": "string"
                },
                "targetType": {
                  "description": "The type of entity the operation type targets.",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "PageSingle": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the page."
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "type": "string",
            "description": "Title of the page."
          },
          "spaceId": {
            "type": "string",
            "description": "ID of the space the page is in."
          },
          "parentId": {
            "type": "string",
            "description": "ID of the parent page, or null if there is no parent page."
          },
          "parentType": {
            "$ref": "#/components/schemas/ContentType"
          },
          "position": {
            "format": "int32",
            "type": "integer",
            "nullable": true,
            "description": "Position of child page within the given parent page tree."
          },
          "authorId": {
            "type": "string",
            "description": "The account ID of the user who created this page originally."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the page was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "body": {
            "$ref": "#/components/schemas/BodySingle"
          },
          "_links": {
            "$ref": "#/components/schemas/AbstractPageLinks"
          }
        }
      },
      "PageBulk": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the page."
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "type": "string",
            "description": "Title of the page."
          },
          "spaceId": {
            "type": "string",
            "description": "ID of the space the page is in."
          },
          "parentId": {
            "type": "string",
            "description": "ID of the parent page, or null if there is no parent page."
          },
          "parentType": {
            "$ref": "#/components/schemas/ContentType"
          },
          "position": {
            "format": "int32",
            "type": "integer",
            "nullable": true,
            "description": "Position of child page within the given parent page tree."
          },
          "authorId": {
            "type": "string",
            "description": "The account ID of the user who created this page originally."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the page was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "body": {
            "$ref": "#/components/schemas/BodyBulk"
          },
          "_links": {
            "$ref": "#/components/schemas/AbstractPageLinks"
          }
        }
      },
      "ContentType": {
        "enum": [
          "page"
        ],
        "type": "string",
        "description": "Content type of the parent, or null if there is no parent."
      },
      "PageBodyWrite": {
        "type": "object",
        "properties": {
          "representation": {
            "enum": [
              "storage",
              "atlas_doc_format",
              "wiki"
            ],
            "type": "string",
            "description": "Type of content representation used for the value field."
          },
          "value": {
            "type": "string",
            "description": "Body of the page, in the format found in the representation field."
          }
        }
      },
      "PageNestedBodyWrite": {
        "type": "object",
        "description": "Body of the page. Only one body format should be specified as the property\nfor this object, e.g. `storage`.",
        "properties": {
          "storage": {
            "$ref": "#/components/schemas/PageBodyWrite"
          },
          "atlas_doc_format": {
            "$ref": "#/components/schemas/PageBodyWrite"
          },
          "wiki": {
            "$ref": "#/components/schemas/PageBodyWrite"
          }
        }
      },
      "BlogPostBodyWrite": {
        "type": "object",
        "properties": {
          "representation": {
            "enum": [
              "storage",
              "atlas_doc_format",
              "wiki"
            ],
            "type": "string",
            "description": "Type of content representation used for the value field."
          },
          "value": {
            "type": "string",
            "description": "Body of the blog post, in the format found in the representation field."
          }
        }
      },
      "BlogPostNestedBodyWrite": {
        "type": "object",
        "description": "Body of the blog post. Only one body format should be specified as the property\nfor this object, e.g. `storage`.",
        "properties": {
          "storage": {
            "$ref": "#/components/schemas/BlogPostBodyWrite"
          },
          "atlas_doc_format": {
            "$ref": "#/components/schemas/BlogPostBodyWrite"
          },
          "wiki": {
            "$ref": "#/components/schemas/BlogPostBodyWrite"
          }
        }
      },
      "CommentBodyWrite": {
        "type": "object",
        "properties": {
          "representation": {
            "enum": [
              "storage",
              "atlas_doc_format",
              "wiki"
            ],
            "type": "string",
            "description": "Type of content representation used for the value field."
          },
          "value": {
            "type": "string",
            "description": "Body of the comment, in the format found in the representation field."
          }
        }
      },
      "CommentNestedBodyWrite": {
        "type": "object",
        "description": "Body of the comment. Only one body format should be specified as the property\nfor this object, e.g. `storage`.",
        "properties": {
          "storage": {
            "$ref": "#/components/schemas/CommentBodyWrite"
          },
          "atlas_doc_format": {
            "$ref": "#/components/schemas/CommentBodyWrite"
          },
          "wiki": {
            "$ref": "#/components/schemas/CommentBodyWrite"
          }
        }
      },
      "CustomContentBodyWrite": {
        "type": "object",
        "properties": {
          "representation": {
            "enum": [
              "storage",
              "atlas_doc_format",
              "raw"
            ],
            "type": "string",
            "description": "Type of content representation used for the value field."
          },
          "value": {
            "type": "string",
            "description": "Body of the custom content, in the format found in the representation field."
          }
        }
      },
      "CustomContentNestedBodyWrite": {
        "type": "object",
        "description": "Body of the custom content. Only one body format should be specified as the property\nfor this object, e.g. `storage`.",
        "properties": {
          "storage": {
            "$ref": "#/components/schemas/CustomContentBodyWrite"
          },
          "atlas_doc_format": {
            "$ref": "#/components/schemas/CustomContentBodyWrite"
          },
          "raw": {
            "$ref": "#/components/schemas/CustomContentBodyWrite"
          }
        }
      },
      "ChildPage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the page."
          },
          "status": {
            "$ref": "#/components/schemas/OnlyArchivedAndCurrentContentStatus"
          },
          "title": {
            "type": "string",
            "description": "Title of the page."
          },
          "spaceId": {
            "type": "string",
            "description": "ID of the space the page is in."
          },
          "childPosition": {
            "format": "int32",
            "type": "integer",
            "nullable": true,
            "description": "Position of child page within the given parent page tree."
          }
        }
      },
      "ChildCustomContent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the child custom content."
          },
          "status": {
            "$ref": "#/components/schemas/OnlyArchivedAndCurrentContentStatus"
          },
          "title": {
            "type": "string",
            "description": "Title of the custom content."
          },
          "type": {
            "type": "string",
            "description": "Custom content type."
          },
          "spaceId": {
            "type": "string",
            "description": "ID of the space the custom content is in."
          }
        }
      },
      "Ancestor": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the ancestor"
          },
          "type": {
            "$ref": "#/components/schemas/AncestorType"
          }
        }
      },
      "AncestorType": {
        "enum": [
          "page"
        ],
        "type": "string",
        "description": "The type of ancestor."
      },
      "Space": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the space."
          },
          "key": {
            "type": "string",
            "description": "Key of the space."
          },
          "name": {
            "type": "string",
            "description": "Name of the space."
          },
          "type": {
            "$ref": "#/components/schemas/SpaceType"
          },
          "status": {
            "$ref": "#/components/schemas/SpaceStatus"
          },
          "authorId": {
            "type": "string",
            "description": "The account ID of the user who created this space originally."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the space was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
          },
          "homepageId": {
            "type": "string",
            "description": "ID of the space's homepage."
          },
          "description": {
            "$ref": "#/components/schemas/SpaceDescription"
          },
          "icon": {
            "$ref": "#/components/schemas/SpaceIcon"
          }
        }
      },
      "SpaceDescription": {
        "type": "object",
        "description": "Contains fields for each representation type requested.",
        "properties": {
          "plain": {
            "$ref": "#/components/schemas/BodyType"
          },
          "view": {
            "$ref": "#/components/schemas/BodyType"
          }
        }
      },
      "SpaceIcon": {
        "type": "object",
        "description": "The icon of the space",
        "properties": {
          "path": {
            "type": "string",
            "description": "The path (relative to base URL) at which the space's icon can be retrieved. The format should be like `/wiki/download/...` or `/wiki/aa-avatar/...`"
          }
        }
      },
      "SpacePermission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the space permission."
          },
          "principal": {
            "type": "object",
            "description": "The entity the space permissions corresponds to.",
            "properties": {
              "type": {
                "enum": [
                  "user",
                  "group",
                  "role"
                ],
                "type": "string"
              },
              "id": {
                "type": "string",
                "description": "ID of the entity."
              }
            }
          },
          "operation": {
            "type": "object",
            "description": "The operation the space permission corresponds to.",
            "properties": {
              "key": {
                "enum": [
                  "use",
                  "create",
                  "read",
                  "update",
                  "delete",
                  "copy",
                  "move",
                  "export",
                  "purge",
                  "purge_version",
                  "administer",
                  "restore",
                  "create_space",
                  "restrict_content",
                  "archive"
                ],
                "type": "string",
                "description": "The type of operation."
              },
              "targetType": {
                "enum": [
                  "page",
                  "blogpost",
                  "comment",
                  "attachment",
                  "whiteboard",
                  "space",
                  "application",
                  "userProfile"
                ],
                "type": "string",
                "description": "The type of entity the operation type targets."
              }
            }
          }
        }
      },
      "SpaceProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the space property."
          },
          "key": {
            "type": "string",
            "description": "Key of the space property."
          },
          "value": {
            "description": "Value of the space property."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "RFC3339 compliant date time at which the property was created."
          },
          "createdBy": {
            "type": "string",
            "description": "Atlassian account ID of the user that created the space property."
          },
          "version": {
            "type": "object",
            "properties": {
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "RFC3339 compliant date time at which the property's current version was created."
              },
              "createdBy": {
                "type": "string",
                "description": "Atlassian account ID of the user that created the space property's current version."
              },
              "message": {
                "type": "string",
                "description": "Message associated with the current version."
              },
              "number": {
                "type": "integer",
                "format": "int32",
                "description": "The space property's current version number."
              }
            }
          }
        }
      },
      "SpacePropertyCreateRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key of the space property"
          },
          "value": {
            "description": "Value of the space property."
          }
        }
      },
      "SpacePropertyUpdateRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key of the space property"
          },
          "value": {
            "description": "Value of the space property."
          },
          "version": {
            "type": "object",
            "description": "New version number and associated message",
            "properties": {
              "number": {
                "type": "integer",
                "format": "int32",
                "description": "Version number of the new version. Should be 1 more than the current version number."
              },
              "message": {
                "type": "string",
                "description": "Message to be associated with the new version."
              }
            }
          }
        }
      },
      "SpaceType": {
        "enum": [
          "global",
          "personal"
        ],
        "type": "string",
        "description": "The type of space."
      },
      "SpaceStatus": {
        "enum": [
          "current",
          "archived"
        ],
        "type": "string",
        "description": "The status of the space."
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the task."
          },
          "localId": {
            "type": "string",
            "description": "Local ID of the task. This ID is local to the corresponding page or blog post."
          },
          "spaceId": {
            "type": "string",
            "description": "ID of the space the task is in."
          },
          "pageId": {
            "type": "string",
            "description": "ID of the page the task is in."
          },
          "blogPostId": {
            "type": "string",
            "description": "ID of the blog post the task is in."
          },
          "status": {
            "enum": [
              "complete",
              "incomplete"
            ],
            "type": "string",
            "description": "Status of the task."
          },
          "body": {
            "$ref": "#/components/schemas/BodySingle"
          },
          "createdBy": {
            "type": "string",
            "description": "Account ID of the user who created this task."
          },
          "assignedTo": {
            "type": "string",
            "description": "Account ID of the user to whom this task is assigned."
          },
          "completedBy": {
            "type": "string",
            "description": "Account ID of the user who completed this task."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the task was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the task was updated. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
          },
          "dueAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the task is due. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the task was completed. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
          }
        }
      },
      "Version": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the version was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
          },
          "message": {
            "type": "string",
            "description": "Message associated with the current version."
          },
          "number": {
            "format": "int32",
            "type": "integer",
            "description": "The version number."
          },
          "minorEdit": {
            "type": "boolean",
            "description": "Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions."
          },
          "authorId": {
            "type": "string",
            "description": "The account ID of the user who created this version."
          }
        }
      },
      "AttachmentVersion": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the version was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
          },
          "message": {
            "type": "string",
            "description": "Message associated with the current version."
          },
          "number": {
            "format": "int32",
            "type": "integer",
            "description": "The version number."
          },
          "minorEdit": {
            "type": "boolean",
            "description": "Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions."
          },
          "authorId": {
            "type": "string",
            "description": "The account ID of the user who created this version."
          },
          "attachment": {
            "$ref": "#/components/schemas/VersionedEntity"
          }
        }
      },
      "BlogPostVersion": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the version was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
          },
          "message": {
            "type": "string",
            "description": "Message associated with the current version."
          },
          "number": {
            "format": "int32",
            "type": "integer",
            "description": "The version number."
          },
          "minorEdit": {
            "type": "boolean",
            "description": "Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions."
          },
          "authorId": {
            "type": "string",
            "description": "The account ID of the user who created this version."
          },
          "blogpost": {
            "$ref": "#/components/schemas/VersionedEntity"
          }
        }
      },
      "PageVersion": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the version was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
          },
          "message": {
            "type": "string",
            "description": "Message associated with the current version."
          },
          "number": {
            "format": "int32",
            "type": "integer",
            "description": "The version number."
          },
          "minorEdit": {
            "type": "boolean",
            "description": "Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions."
          },
          "authorId": {
            "type": "string",
            "description": "The account ID of the user who created this version."
          },
          "page": {
            "$ref": "#/components/schemas/VersionedEntity"
          }
        }
      },
      "CustomContentVersion": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the version was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
          },
          "message": {
            "type": "string",
            "description": "Message associated with the current version."
          },
          "number": {
            "format": "int32",
            "type": "integer",
            "description": "The version number."
          },
          "minorEdit": {
            "type": "boolean",
            "description": "Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions."
          },
          "authorId": {
            "type": "string",
            "description": "The account ID of the user who created this version."
          },
          "custom": {
            "$ref": "#/components/schemas/VersionedEntity"
          }
        }
      },
      "CommentVersion": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the version was created. In format \"YYYY-MM-DDTHH:mm:ss.sssZ\"."
          },
          "message": {
            "type": "string",
            "description": "Message associated with the current version."
          },
          "number": {
            "format": "int32",
            "type": "integer",
            "description": "The version number."
          },
          "minorEdit": {
            "type": "boolean",
            "description": "Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions."
          },
          "authorId": {
            "type": "string",
            "description": "The account ID of the user who created this version."
          },
          "comment": {
            "$ref": "#/components/schemas/VersionedEntity"
          }
        }
      },
      "VersionedEntity": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the entity."
          },
          "id": {
            "type": "string",
            "description": "ID of the entity."
          },
          "body": {
            "$ref": "#/components/schemas/BodyBulk"
          }
        }
      },
      "AttachmentSortOrder": {
        "enum": [
          "created-date",
          "-created-date",
          "modified-date",
          "-modified-date"
        ],
        "type": "string",
        "description": "The sort fields for attachments. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`."
      },
      "BlogPostSortOrder": {
        "enum": [
          "id",
          "-id",
          "created-date",
          "-created-date",
          "modified-date",
          "-modified-date"
        ],
        "type": "string",
        "description": "The sort fields for blog posts. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`."
      },
      "CommentSortOrder": {
        "enum": [
          "created-date",
          "-created-date",
          "modified-date",
          "-modified-date"
        ],
        "type": "string",
        "description": "The sort fields for comments. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`."
      },
      "ContentPropertySortOrder": {
        "type": "string",
        "description": "The sort fields for content properties. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.",
        "enum": [
          "key",
          "-key"
        ]
      },
      "LabelSortOrder": {
        "enum": [
          "created-date",
          "-created-date",
          "id",
          "-id",
          "name",
          "-name"
        ],
        "type": "string",
        "description": "The sort fields for labels. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`."
      },
      "ChildPageSortOrder": {
        "enum": [
          "created-date",
          "-created-date",
          "id",
          "-id",
          "child-position",
          "-child-position",
          "modified-date",
          "-modified-date"
        ],
        "type": "string",
        "description": "The sort fields for child pages. The default sort direction is ascending by child-position. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`."
      },
      "ChildCustomContentSortOrder": {
        "enum": [
          "created-date",
          "-created-date",
          "id",
          "-id",
          "modified-date",
          "-modified-date"
        ],
        "type": "string",
        "description": "The sort fields for child custom content. The default sort direction is ascending by id. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`."
      },
      "CustomContentSortOrder": {
        "enum": [
          "id",
          "-id",
          "created-date",
          "-created-date",
          "modified-date",
          "-modified-date",
          "title",
          "-title"
        ],
        "type": "string",
        "description": "The sort fields for custom content. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`."
      },
      "PageSortOrder": {
        "enum": [
          "id",
          "-id",
          "created-date",
          "-created-date",
          "modified-date",
          "-modified-date",
          "title",
          "-title"
        ],
        "type": "string",
        "description": "The sort fields for pages. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`."
      },
      "SpaceSortOrder": {
        "enum": [
          "id",
          "-id",
          "key",
          "-key",
          "name",
          "-name"
        ],
        "type": "string",
        "description": "The sort fields for spaces. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`."
      },
      "VersionSortOrder": {
        "enum": [
          "modified-date",
          "-modified-date"
        ],
        "type": "string",
        "description": "The sort fields for versions. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`."
      },
      "InlineCommentResolutionStatus": {
        "enum": [
          "open",
          "reopened",
          "resolved",
          "dangling"
        ],
        "type": "string",
        "description": "Inline comment resolution status"
      },
      "InlineCommentProperties": {
        "type": "object",
        "properties": {
          "inline-marker-ref": {
            "type": "string",
            "description": "Property value used to reference the highlighted element in DOM."
          },
          "inline-original-selection": {
            "type": "string",
            "description": "Text that is highlighted"
          }
        }
      },
      "PageCommentModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the comment."
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "type": "string",
            "description": "Title of the comment."
          },
          "pageId": {
            "type": "string",
            "description": "ID of the page the comment is in."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "body": {
            "$ref": "#/components/schemas/BodyBulk"
          },
          "_links": {
            "$ref": "#/components/schemas/CommentLinks"
          }
        }
      },
      "PageInlineCommentModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the comment."
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "type": "string",
            "description": "Title of the comment."
          },
          "pageId": {
            "type": "string",
            "description": "ID of the page the comment is in."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "body": {
            "$ref": "#/components/schemas/BodyBulk"
          },
          "resolutionStatus": {
            "$ref": "#/components/schemas/InlineCommentResolutionStatus"
          },
          "properties": {
            "$ref": "#/components/schemas/InlineCommentProperties"
          },
          "_links": {
            "$ref": "#/components/schemas/CommentLinks"
          }
        }
      },
      "BlogPostCommentModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the comment."
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "type": "string",
            "description": "Title of the comment."
          },
          "blogPostId": {
            "type": "string",
            "description": "ID of the blog post the comment is in."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "body": {
            "$ref": "#/components/schemas/BodyBulk"
          },
          "_links": {
            "$ref": "#/components/schemas/CommentLinks"
          }
        }
      },
      "BlogPostInlineCommentModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the comment."
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "type": "string",
            "description": "Title of the comment."
          },
          "blogPostId": {
            "type": "string",
            "description": "ID of the blog post the comment is in."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "body": {
            "$ref": "#/components/schemas/BodyBulk"
          },
          "resolutionStatus": {
            "$ref": "#/components/schemas/InlineCommentResolutionStatus"
          },
          "properties": {
            "$ref": "#/components/schemas/InlineCommentProperties"
          },
          "_links": {
            "$ref": "#/components/schemas/CommentLinks"
          }
        }
      },
      "ChildrenCommentModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the comment."
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "type": "string",
            "description": "Title of the comment."
          },
          "parentCommentId": {
            "type": "string",
            "description": "ID of the parent comment the child comment is in."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "body": {
            "$ref": "#/components/schemas/BodyBulk"
          },
          "_links": {
            "$ref": "#/components/schemas/CommentLinks"
          }
        }
      },
      "InlineCommentChildrenModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the comment."
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "type": "string",
            "description": "Title of the comment."
          },
          "parentCommentId": {
            "type": "string",
            "description": "ID of the parent comment the child comment is in."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "body": {
            "$ref": "#/components/schemas/BodyBulk"
          },
          "resolutionStatus": {
            "$ref": "#/components/schemas/InlineCommentResolutionStatus"
          },
          "properties": {
            "$ref": "#/components/schemas/InlineCommentProperties"
          },
          "_links": {
            "$ref": "#/components/schemas/CommentLinks"
          }
        }
      },
      "FooterCommentModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the comment."
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "type": "string",
            "description": "Title of the comment."
          },
          "blogPostId": {
            "type": "string",
            "description": "ID of the blog post containing the comment if the comment is on a blog post."
          },
          "pageId": {
            "type": "string",
            "description": "ID of the page containing the comment if the comment is on a page."
          },
          "parentCommentId": {
            "type": "string",
            "description": "ID of the parent comment if the comment is a reply."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "body": {
            "$ref": "#/components/schemas/BodySingle"
          },
          "_links": {
            "$ref": "#/components/schemas/CommentLinks"
          }
        }
      },
      "InlineCommentModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the comment."
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "title": {
            "type": "string",
            "description": "Title of the comment."
          },
          "blogPostId": {
            "type": "string",
            "description": "ID of the blog post containing the comment if the comment is on a blog post."
          },
          "pageId": {
            "type": "string",
            "description": "ID of the page containing the comment if the comment is on a page."
          },
          "parentCommentId": {
            "type": "string",
            "description": "ID of the parent comment if the comment is a reply."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "body": {
            "$ref": "#/components/schemas/BodySingle"
          },
          "resolutionLastModifierId": {
            "type": "string",
            "description": "Atlassian Account ID of last person who modified the resolve state of the comment. Null until comment is resolved or reopened."
          },
          "resolutionLastModifiedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the last modification to the comment's resolution status. Null until comment is resolved or reopened."
          },
          "resolutionStatus": {
            "$ref": "#/components/schemas/InlineCommentResolutionStatus"
          },
          "properties": {
            "$ref": "#/components/schemas/InlineCommentProperties"
          },
          "_links": {
            "$ref": "#/components/schemas/CommentLinks"
          }
        }
      },
      "CreateFooterCommentModel": {
        "type": "object",
        "properties": {
          "blogPostId": {
            "type": "string",
            "description": "ID of the containing blog post, if intending to create a top level footer comment. Do not provide if creating a reply."
          },
          "pageId": {
            "type": "string",
            "description": "ID of the containing page, if intending to create a top level footer comment. Do not provide if creating a reply."
          },
          "parentCommentId": {
            "type": "string",
            "description": "ID of the parent comment, if intending to create a reply. Do not provide if creating a top level comment."
          },
          "body": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CommentBodyWrite"
              },
              {
                "$ref": "#/components/schemas/CommentNestedBodyWrite"
              }
            ]
          }
        }
      },
      "CreateInlineCommentModel": {
        "type": "object",
        "properties": {
          "blogPostId": {
            "type": "string",
            "description": "ID of the containing blog post, if intending to create a top level footer comment. Do not provide if creating a reply."
          },
          "pageId": {
            "type": "string",
            "description": "ID of the containing page, if intending to create a top level footer comment. Do not provide if creating a reply."
          },
          "parentCommentId": {
            "type": "string",
            "description": "ID of the parent comment, if intending to create a reply. Do not provide if creating a top level comment."
          },
          "body": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CommentBodyWrite"
              },
              {
                "$ref": "#/components/schemas/CommentNestedBodyWrite"
              }
            ]
          },
          "inlineCommentProperties": {
            "type": "object",
            "description": "Object describing the text to highlight on the page/blog post. Only applicable for top level inline comments (not replies) and required in that case.",
            "properties": {
              "textSelection": {
                "type": "string",
                "description": "The text to highlight"
              },
              "textSelectionMatchCount": {
                "type": "integer",
                "description": "The number of matches for the selected text on the page (should be strictly greater than textSelectionMatchIndex)"
              },
              "textSelectionMatchIndex": {
                "type": "integer",
                "description": "The match index to highlight. This is zero-based. E.g. if you have 3 occurrences of \"hello world\" on a page \nand you want to highlight the second occurrence, you should pass 1 for textSelectionMatchIndex and 3 for textSelectionMatchCount."
              }
            }
          }
        }
      },
      "UpdateFooterCommentModel": {
        "type": "object",
        "properties": {
          "version": {
            "type": "object",
            "properties": {
              "number": {
                "type": "integer",
                "description": "Number of new version. Should be 1 higher than current version of the comment."
              },
              "message": {
                "type": "string",
                "description": "Optional message store for the new version."
              }
            }
          },
          "body": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CommentBodyWrite"
              },
              {
                "$ref": "#/components/schemas/CommentNestedBodyWrite"
              }
            ]
          }
        }
      },
      "UpdateInlineCommentModel": {
        "type": "object",
        "properties": {
          "version": {
            "type": "object",
            "properties": {
              "number": {
                "type": "integer",
                "description": "Number of new version. Should be 1 higher than current version of the comment."
              },
              "message": {
                "type": "string",
                "description": "Optional message store for the new version."
              }
            }
          },
          "body": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CommentBodyWrite"
              },
              {
                "$ref": "#/components/schemas/CommentNestedBodyWrite"
              }
            ]
          },
          "resolved": {
            "type": "boolean",
            "description": "Resolved state of the comment. Set to true to resolve the comment, set to false to reopen it. If\nmatching the existing state (i.e. true -> resolved or false -> open/reopened) , no change will occur. A dangling\ncomment cannot be updated."
          }
        }
      },
      "AbstractPageLinks": {
        "type": "object",
        "properties": {
          "webui": {
            "type": "string",
            "description": "Web UI link of the content."
          },
          "editui": {
            "type": "string",
            "description": "Edit UI link of the content."
          },
          "tinyui": {
            "type": "string",
            "description": "Web UI link of the content."
          }
        }
      },
      "CustomContentLinks": {
        "type": "object",
        "properties": {
          "webui": {
            "type": "string",
            "description": "Web UI link of the content."
          }
        }
      },
      "CommentLinks": {
        "type": "object",
        "properties": {
          "webui": {
            "type": "string",
            "description": "Web UI link of the content."
          }
        }
      },
      "AttachmentLinks": {
        "type": "object",
        "properties": {
          "webui": {
            "type": "string",
            "description": "Web UI link of the content."
          },
          "download": {
            "type": "string",
            "description": "Download link of the content."
          }
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "description": "You can access this resource via basic auth.",
        "scheme": "basic"
      },
      "oAuthDefinitions": {
        "type": "oauth2",
        "description": "This API uses OAuth 2 with the authorizationCode grant flow.",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://auth.atlassian.com/authorize",
            "tokenUrl": "https://auth.atlassian.com/oauth/token",
            "scopes": {
              "read:page:confluence": "View pages and blogposts and their properties.",
              "read:space:confluence": "View spaces and their properties.",
              "read:attachment:confluence": "View attachments and their properties.",
              "read:comment:confluence": "View comments and their properties.",
              "read:custom-content:confluence": "View custom content and their properties.",
              "read:task:confluence": "View tasks.",
              "write:space:confluence": "Create and update spaces and their properties.",
              "write:page:confluence": "Create and update pages and blog posts and their properties.",
              "write:comment:confluence": "Create and update comments and their properties.",
              "write:custom-content:confluence": "Create and update custom content and their properties.",
              "delete:custom-content:confluence": "Delete custom content.",
              "delete:page:confluence": "Delete pages and blog posts.",
              "delete:comment:confluence": "Delete comments."
            }
          }
        }
      }
    }
  },
  "x-atlassian-narrative": {
    "documents": [
      {
        "title": "About",
        "anchor": "about",
        "body": "This is the reference for the Confluence Cloud REST API v2, with definitions and performance intended to be an improvement over v1. You can click on the meatball menu in the upper right to download the spec or Postman collection."
      },
      {
        "title": "Authentication and authorization",
        "anchor": "auth",
        "body": "**Authentication:** If you are building a Cloud app, authentication is implemented via JWT or Oauth 2.0, depending on what you're building (see [Authentication for apps](https://developer.atlassian.com/cloud/confluence/authentication-for-apps/)). Otherwise, if you are authenticating directly against the REST API, the REST API supports basic auth (see [Basic auth for REST APIs](https://developer.atlassian.com/cloud/confluence/basic-auth-for-rest-apis/)).\n\n**Authorization:** If you are building a Cloud app, authorization can be implemented by [scopes](https://developer.atlassian.com/cloud/confluence/scopes/) or by [OAuth 2.0 user impersonation](https://developer.atlassian.com/cloud/confluence/oauth-2-jwt-bearer-tokens-for-apps). Otherwise, if you are making calls directly against the REST API, authorization is based on the user used in the authentication process.\n\nSee [Security overview](https://developer.atlassian.com/cloud/confluence/security-overview/) for more details on authentication and authorization."
      },
      {
        "title": "Using the REST API",
        "anchor": "using",
        "body": "**Pagination:** The Confluence REST API v2 uses cursor-based pagination: a method that returns a response with multiple objects can only return a limited number at one time. This limits the size of responses and conserves server resources.\n\nUse the 'limit' and 'cursor' parameters on endpoints that return multiple objects to work with pagination. First, make a request with your desired limit in the 'limit' parameter, then observe the `Link` header in the response. If there are additional entities to be retrieved, the `next` URL in the `Link` header will allow you to retrieve the next set of results. This relative URL will also be available under the `_links.next` property of paginated responses. \n\nFor example, the following request will return 5 page objects (if there are 5 present in the target site).\n```\nGET /wiki/api/v2/pages?limit=5\n```\n\nIf there are additional pages available, the `Link` header will look like:\n```\n</wiki/api/v2/pages?limit=5&cursor=<cursor token>>; rel=\"next\"\n```\nThe URL within the `Link` header will allow you to access the next 5 pages, while the `rel=\"next\"` denotes that the URL refers to the \"next\" set of pages. Relations for a single URL are separated by semicolons (;) and URLs are separated by commas (,)\nIf there are no related URLs, the `Link` header will not be present in the response and neither will the `next` property for `_links` in the response body."
      }
    ]
  }
}