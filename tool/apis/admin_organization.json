{
  "openapi": "3.0.0",
  "info": {
    "title": "API for Atlassian Access",
    "version": "1.0"
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Orgs",
      "description": "Orgs APIs"
    },
    {
      "name": "Users",
      "description": "Orgs Users APIs"
    },
    {
      "name": "Domains",
      "description": "Domain APIs"
    },
    {
      "name": "Events",
      "description": "Events APIs"
    },
    {
      "name": "Policies",
      "description": "Policies APIs"
    },
    {
      "name": "Directory",
      "description": "Org Directory APIs"
    },
    {
      "name": "Workspaces",
      "description": "Org Workspaces APIs"
    }
  ],
  "paths": {
    "/v1/orgs": {
      "get": {
        "tags": [
          "Orgs"
        ],
        "operationId": "getOrgs",
        "summary": "Get organizations",
        "description": "Returns a list of your organizations (based on your API key).",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Sets the starting point for the page of results to return.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error.InvalidPageCursor"
          },
          "401": {
            "$ref": "#/components/responses/Error.Unauthenticated"
          },
          "429": {
            "$ref": "#/components/responses/Error.RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      }
    },
    "/v1/orgs/{orgId}": {
      "get": {
        "tags": [
          "Orgs"
        ],
        "operationId": "getOrgById",
        "summary": "Get an organization by ID",
        "description": "Returns information about a single organization by ID",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "ID of the organization to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error.Unauthenticated"
          },
          "404": {
            "$ref": "#/components/responses/Error.OrgNotFound"
          },
          "429": {
            "$ref": "#/components/responses/Error.RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      }
    },
    "/v1/orgs/{orgId}/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getUsers",
        "summary": "Get users in an organization",
        "description": "Returns a list of users in an organization.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "ID of the organization to query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Sets the starting point for the page of results to return.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error.InvalidPageCursor"
          },
          "401": {
            "$ref": "#/components/responses/Error.Unauthenticated"
          },
          "404": {
            "$ref": "#/components/responses/Error.OrgNotFound"
          },
          "429": {
            "$ref": "#/components/responses/Error.RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      }
    },
    "/v1/orgs/{orgId}/domains": {
      "get": {
        "tags": [
          "Domains"
        ],
        "operationId": "getDomains",
        "summary": "Get domains in an organization",
        "description": "Returns a list of domains in an organization one page at a time.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "ID of the organization to query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Sets the starting point for the page of results to return.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error.InvalidPageCursor"
          },
          "401": {
            "$ref": "#/components/responses/Error.Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Error.NoPerms"
          },
          "429": {
            "$ref": "#/components/responses/Error.RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      }
    },
    "/v1/orgs/{orgId}/domains/{domainId}": {
      "get": {
        "tags": [
          "Domains"
        ],
        "operationId": "getDomainById",
        "summary": "Get domain by ID",
        "description": "Returns information about a single verified domain by ID.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "ID of the organization the domain belongs to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "ID of the domain to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error.InvalidDomainIdentifier"
          },
          "401": {
            "$ref": "#/components/responses/Error.Unauthenticated"
          },
          "403": {
            "$ref": "#/components/responses/Error.NoPerms"
          },
          "404": {
            "description": "Domain not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error.DomainNotFound.Model"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error.RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      }
    },
    "/v1/orgs/{orgId}/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "operationId": "getEvents",
        "summary": "Get an audit log of events",
        "description": "Returns an audit log of events from an organization one page at a time.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "ID of the org",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Sets the starting point for the page of results to return",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Single query term for searching events.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The earliest date and time of the event represented as a UNIX epoch time.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The latest date and time of the event represented as a UNIX epoch time.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action",
            "in": "query",
            "description": "A query filter that returns events of a specific action type.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPage"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error.InvalidPageCursor.Model"
                    },
                    {
                      "$ref": "#/components/schemas/Error.InvalidSearchTimeDate.Model"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error.Unauthenticated"
          },
          "429": {
            "$ref": "#/components/responses/Error.RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      }
    },
    "/v1/orgs/{orgId}/events/{eventId}": {
      "get": {
        "tags": [
          "Events"
        ],
        "operationId": "getEventById",
        "summary": "Get an event by ID",
        "description": "Returns information about a single event by ID.",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "ID of the organization to query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of the event to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error.Unauthenticated"
          },
          "404": {
            "description": "Event or Org Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error.EventNotFound.Model"
                    },
                    {
                      "$ref": "#/components/schemas/Error.OrgNotFound.Model"
                    }
                  ]
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error.RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      }
    },
    "/v1/orgs/{orgId}/event-actions": {
      "get": {
        "tags": [
          "Events"
        ],
        "operationId": "getEventActions",
        "summary": "Get list of event actions",
        "description": "Returns information localized event actions",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "ID of the organization to query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventActions"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error.Unauthenticated"
          },
          "404": {
            "$ref": "#/components/responses/Error.OrgNotFound"
          },
          "429": {
            "$ref": "#/components/responses/Error.RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      }
    },
    "/v1/orgs/{orgId}/policies": {
      "get": {
        "tags": [
          "Policies"
        ],
        "operationId": "getPolicies",
        "summary": "Get list of policies",
        "description": "Returns information about org policies",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "ID of the organization to query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Sets the starting point for the page of results to return.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Sets the type for the page of policies to return.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyPage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error.Unauthenticated"
          },
          "429": {
            "$ref": "#/components/responses/Error.RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      },
      "post": {
        "tags": [
          "Policies"
        ],
        "operationId": "createPolicy",
        "summary": "Create a policy",
        "description": "Create a policy for an org",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "ID of the organization to create policy for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyCreateInput"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error.InvalidResource"
          },
          "401": {
            "$ref": "#/components/responses/Error.Unauthenticated"
          },
          "429": {
            "$ref": "#/components/responses/Error.RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      }
    },
    "/v1/orgs/{orgId}/policies/{policyId}": {
      "get": {
        "tags": [
          "Policies"
        ],
        "operationId": "getPolicyById",
        "summary": "Get a policy by ID",
        "description": "Returns information about a single policy by ID",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "ID of the organization to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "ID of the policy to query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error.Unauthenticated"
          },
          "404": {
            "description": "Policy or organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error.PolicyNotFound.Model"
                    },
                    {
                      "$ref": "#/components/schemas/Error.OrgNotFound.Model"
                    }
                  ]
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error.RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      },
      "put": {
        "tags": [
          "Policies"
        ],
        "operationId": "updatePolicy",
        "summary": "Update a policy",
        "description": "Update a policy for an org",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "ID of the organization to update policy for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "ID of the policy to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyUpdateInput"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error.InvalidResource"
          },
          "401": {
            "$ref": "#/components/responses/Error.Unauthenticated"
          },
          "404": {
            "description": "Policy or organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error.PolicyNotFound.Model"
                    },
                    {
                      "$ref": "#/components/schemas/Error.OrgNotFound.Model"
                    }
                  ]
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error.RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      },
      "delete": {
        "tags": [
          "Policies"
        ],
        "operationId": "deletePolicy",
        "summary": "Delete a policy",
        "description": "Delete a policy for an org",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "ID of the organization to create policy for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "ID of the policy to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successful operation"
          },
          "400": {
            "$ref": "#/components/responses/Error.InvalidResource"
          },
          "401": {
            "$ref": "#/components/responses/Error.Unauthenticated"
          },
          "404": {
            "description": "Policy or organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error.PolicyNotFound.Model"
                    },
                    {
                      "$ref": "#/components/schemas/Error.OrgNotFound.Model"
                    }
                  ]
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error.RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      }
    },
    "/v1/orgs/{orgId}/policies/{policyId}/resources": {
      "post": {
        "tags": [
          "Policies"
        ],
        "operationId": "addResourceToPolicy",
        "summary": "Add Resource to Policy",
        "description": "Adds a resource to an existing Policy",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "ID of the organization to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "ID of the policy to query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceInput"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error.Unauthenticated"
          },
          "404": {
            "description": "Policy or organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error.PolicyNotFound.Model"
                    },
                    {
                      "$ref": "#/components/schemas/Error.OrgNotFound.Model"
                    }
                  ]
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error.RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      }
    },
    "/v1/orgs/{orgId}/policies/{policyId}/resources/{resourceId}": {
      "put": {
        "tags": [
          "Policies"
        ],
        "operationId": "updatePolicyResource",
        "summary": "Update Policy Resource",
        "description": "Update an existing Policy Resource",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "ID of the organization to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "ID of the policy to query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "Resource ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceUpdateInput"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error.Unauthenticated"
          },
          "404": {
            "description": "Policy or organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error.PolicyNotFound.Model"
                    },
                    {
                      "$ref": "#/components/schemas/Error.OrgNotFound.Model"
                    },
                    {
                      "$ref": "#/components/schemas/Error.PolicyResourceNotFound.Model"
                    }
                  ]
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error.RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      },
      "delete": {
        "tags": [
          "Policies"
        ],
        "operationId": "deletePolicyResource",
        "summary": "Delete Policy Resource",
        "description": "Delete an existing Policy Resource",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "ID of the organization to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "ID of the policy to query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "Resource ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Error.Unauthenticated"
          },
          "404": {
            "description": "Policy or organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error.PolicyNotFound.Model"
                    },
                    {
                      "$ref": "#/components/schemas/Error.OrgNotFound.Model"
                    },
                    {
                      "$ref": "#/components/schemas/Error.PolicyResourceNotFound.Model"
                    }
                  ]
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/Error.RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      }
    },
    "/v1/orgs/{orgId}/policies/{policyId}/validate": {
      "get": {
        "tags": [
          "Policies",
          "Validate"
        ],
        "summary": "Validate Policy",
        "description": "Validate a policy based on specific requirements. For example, Trigger CDEN validation by pushing a task into the SQS dns-validation queue",
        "operationId": "validatePolicy",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "Policy ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted CDEN policy validation request"
          },
          "400": {
            "$ref": "#/components/responses/Error.CdenPolicyValidationFailed"
          },
          "401": {
            "$ref": "#/components/responses/Error.Unauthenticated"
          },
          "429": {
            "$ref": "#/components/responses/Error.RateLimited"
          },
          "500": {
            "$ref": "#/components/responses/Error.CdenPolicyValidationFailed"
          }
        }
      }
    },
    "/v1/orgs/{orgId}/directory/users/{accountId}/last-active-dates": {
      "get": {
        "tags": [
          "Directory"
        ],
        "summary": "User’s last active dates",
        "description": "**Additional response parameters of the API (for e.g., `added_to_org`) are available only to customers using the new user management experience.** Learn more about the [new user management experience](https://community.atlassian.com/t5/Atlassian-Access-articles/User-management-for-cloud-admins-just-got-easier/ba-p/1576592).\n\nSpecifications:\n- Return a user’s last active date for each product listed in Atlassian Administration.\n- Active is defined as viewing a product's page for a minimum of 2 seconds. \n- The data for the last activity may be delayed by up to 4 hours.\n- If the user has not accessed a product, the `product_access` response field will be empty. \n\nLearn the fastest way to call the API with a detailed [tutorial](https://developer.atlassian.com/cloud/admin/organization/user-last-active-dates/).\n",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "description": "Your organization is identified by a Unique ID. You get your organization ID and Organization API key simultaneously.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "Unique ID of the user's account.\nUse the [Jira User Search API](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-users/#api-rest-api-3-users-search-get) to get the accountId (if Jira is available for your Organization). **Jira APIs use a different [authentication method ](https://developer.atlassian.com/cloud/jira/platform/basic-auth-for-rest-apis/).**\nIf you don’t have Jira, export a .csv of the user list. Learn how to [export users from a site](https://support.atlassian.com/organization-administration/docs/export-users-from-a-site/).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "description": "Cursor to fetch the next page",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProductAccessActivityPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request\n\nExpected values for `ApplicationError.code`: (see type description for details)\n- `ADMIN-400-4`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\n\nExpected values for `ApplicationError.code`: (see type description for details)\n  - `ADMIN-401-2`\n\nExpected values for `ProxyError.code`: (see type description for details)\n  - `401`\n",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ProxyError"
                    },
                    {
                      "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\n\nExpected values for `ApplicationError.code`: (see type description for details)\n- `ADMIN-403-3`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                }
              }
            }
          },
          "404": {
            "description": "Bad request\n\nExpected values for `ApplicationError.code`: (see type description for details)\n- `ADMIN-404-8`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                }
              }
            }
          },
          "429": {
            "description": "Too many API requests\n\nExpected values for `ProxyError.code`: (see type description for details)\n- `429`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyError"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      }
    },
    "/v1/orgs/{orgId}/directory/users/{accountId}": {
      "delete": {
        "tags": [
          "Directory"
        ],
        "summary": "Remove user access",
        "description": "**The API is available for customers using the new user management experience only.** Learn more about the [new user management experience](https://community.atlassian.com/t5/Atlassian-Access-articles/User-management-for-cloud-admins-just-got-easier/ba-p/1576592).\n\nSpecifications:\n- Remove user access to products listed in Atlassian Administration.\n- Remove users from **Users** and **Groups** in **Directory**.\n- Make product licenses available for active users.\n\nUsers with emails whose domain is claimed can still be found in **Managed accounts** in **Directory**.\n\nLearn the fastest way to call the API with a detailed [tutorial](https://developer.atlassian.com/cloud/admin/organization/remove-user/). \n",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "description": "Your organization is identified by a Unique ID. You get your organization ID and Organization API key simultaneously.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "Unique ID of the user's account that you are deleting.\nUse the [Jira User Search API](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-users/#api-rest-api-3-users-search-get) to get the accountId (if Jira is available for your Organization). **Jira APIs use a different [authentication method ](https://developer.atlassian.com/cloud/jira/platform/basic-auth-for-rest-apis/).**\nIf you don’t have Jira, export a .csv of the user list. Learn how to [export users from a site](https://support.atlassian.com/organization-administration/docs/export-users-from-a-site/).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User access removed from organization. Everything went fine, nothing to return."
          },
          "400": {
            "description": "Bad request\n\nExpected values for `ApplicationError.code`: (see type description for details)\n- `ADMIN-400-4`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\n\nExpected values for `ApplicationError.code`: (see type description for details)\n  - `ADMIN-401-2`\n\nExpected values for `ProxyError.code`: (see type description for details)\n  - `401`\n",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ProxyError"
                    },
                    {
                      "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\n\nExpected values for `ApplicationError.code`: (see type description for details)\n- `ADMIN-403-3`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                }
              }
            }
          },
          "429": {
            "description": "Too many API requests\n\nExpected values for `ProxyError.code`: (see type description for details)\n- `429`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyError"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      }
    },
    "/v1/orgs/{orgId}/directory/users/{accountId}/suspend-access": {
      "post": {
        "tags": [
          "Directory"
        ],
        "summary": "Suspend user access",
        "description": "**The API is available for customers using the new user management experience only.** Learn more about the [new user management experience](https://community.atlassian.com/t5/Atlassian-Access-articles/User-management-for-cloud-admins-just-got-easier/ba-p/1576592).\n\nSpecifications:\n- Suspend user access to products listed in Atlassian Administration.\n- Make product licenses available for active users.\n- Maintain respective users in **Groups** for easy restoration.\n\nLearn the fastest way to call the API with a detailed [tutorial](https://developer.atlassian.com/cloud/admin/organization/suspend-user/).\n",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "description": "Your organization is identified by a Unique ID. You get your organization ID and Organization API key simultaneously.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "Unique ID of the user's account that you are suspending.\nUse the [Jira User Search API](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-users/#api-rest-api-3-users-search-get) to get the accountId (if Jira is available for your Organization). **Jira APIs use a different [authentication method ](https://developer.atlassian.com/cloud/jira/platform/basic-auth-for-rest-apis/).**\nIf you don’t have Jira, export a .csv of the user list. Learn how to [export users from a site](https://support.atlassian.com/organization-administration/docs/export-users-from-a-site/).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User was successfully suspended in the organization directory.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericActionSuccessModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request\n\nExpected values for `ApplicationError.code`: (see type description for details)\n- `ADMIN-400-4`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\n\nExpected values for `ApplicationError.code`: (see type description for details)\n  - `ADMIN-401-2`\n\nExpected values for `ProxyError.code`: (see type description for details)\n  - `401`\n",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ProxyError"
                    },
                    {
                      "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\n\nExpected values for `ApplicationError.code`: (see type description for details)\n- `ADMIN-403-3`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\n\nExpected values for `ApplicationError.code`: (see type description for details)\n- `ADMIN-404-8`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                }
              }
            }
          },
          "429": {
            "description": "Too many API requests\n\nExpected values for `ProxyError.code`: (see type description for details)\n- `429`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyError"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      }
    },
    "/v1/orgs/{orgId}/directory/users/{accountId}/restore-access": {
      "post": {
        "tags": [
          "Directory"
        ],
        "x-experimental": true,
        "summary": "Restore user access",
        "description": "**The API is available for customers using the new user management experience only.** Learn more about the [new user management experience](https://community.atlassian.com/t5/Atlassian-Access-articles/User-management-for-cloud-admins-just-got-easier/ba-p/1576592).\n\nSpecifications:\n- Restore access of an existing user to products listed in Atlassian Administration.\n- Retract the suspend user action.\n\nLearn the fastest way to call the API with a detailed [tutorial](https://developer.atlassian.com/cloud/admin/organization/restore-user/).\n",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "description": "Your organization is identified by a Unique ID. You get your organization ID and Organization API key simultaneously.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "Unique ID of the user's account that you are suspending.\nUse the [Jira User Search API](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-users/#api-rest-api-3-users-search-get) to get the accountId (if Jira is available for your Organization). **Jira APIs use a different [authentication method ](https://developer.atlassian.com/cloud/jira/platform/basic-auth-for-rest-apis/).**\nIf you don’t have Jira, export a .csv of the user list. Learn how to [export users from a site](https://support.atlassian.com/organization-administration/docs/export-users-from-a-site/).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User's access is successfully restored in the organization directory.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericActionSuccessModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request\n\nExpected values for `ApplicationError.code`: (see type description for details)\n- `ADMIN-400-4`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\n\nExpected values for `ApplicationError.code`: (see type description for details)\n  - `ADMIN-401-2`\n\nExpected values for `ProxyError.code`: (see type description for details)\n  - `401`\n",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ProxyError"
                    },
                    {
                      "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\n\nExpected values for `ApplicationError.code`: (see type description for details)\n- `ADMIN-403-3`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                }
              }
            }
          },
          "404": {
            "description": "Bad request\n\nExpected values for `ApplicationError.code`: (see type description for details)\n- `ADMIN-404-8`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                }
              }
            }
          },
          "429": {
            "description": "Too many API requests\n\nExpected values for `ProxyError.code`: (see type description for details)\n- `429`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyError"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      }
    },
    "/v1/orgs/{orgId}/directory/groups/{groupId}/memberships": {
      "post": {
        "tags": [
          "Directory"
        ],
        "x-experimental": true,
        "summary": "Add user to group",
        "description": "**The API is available for customers using the new user management experience only. Learn more about the [new user management experience](https://community.atlassian.com/t5/Atlassian-Access-articles/User-management-for-cloud-admins-just-got-easier/ba-p/1576592).**\n\nThis API will:\n- Add user to a group.\n- Assign multiple permissions to user at once.\n- Easily manage permissions, content access, notification schemes, and roles.\n\nThis API will not:\n- Make modifications to group memberships that are synchronized through SCIM. To make changes to these memberships, you will need to modify them within your external identity provider. Learn more about [configuring user provisioning with an identity provider](https://support.atlassian.com/provisioning-users/docs/configure-user-provisioning-with-an-identity-provider/).\n",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "description": "Your organization is identified by a Unique ID. You get your organization ID and Organization API key simultaneously.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "description": "Unique ID that serves as reference to the group.\nUse the [Jira Group Search API](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-groups/#api-rest-api-3-groups-picker-get) to get the groupId (if Jira is available for your Organization). **Jira APIs use a different [authentication method ](https://developer.atlassian.com/cloud/jira/platform/basic-auth-for-rest-apis/).**\nIf you don’t have Jira, export a .csv of the user list. Make sure to select **pivot to column** when prompted. Learn how to [export users from a site](https://support.atlassian.com/organization-administration/docs/export-users-from-a-site/).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddGroupMembershipInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User was successfully added to the group in the organization directory.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericActionSuccessModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request\n\nExpected values for `ApplicationError.code`: (see type description for details)\n- `ADMIN-400-4`\n- `ADMIN-400-24`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\n\nExpected values for `ApplicationError.code`: (see type description for details)\n  - `ADMIN-401-2`\n\nExpected values for `ProxyError.code`: (see type description for details)\n  - `401`\n",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ProxyError"
                    },
                    {
                      "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\n\nExpected values for `ApplicationError.code`: (see type description for details)\n- `ADMIN-403-3`\n- `ADMIN-403-5`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\n\nExpected values for `ApplicationError.code`: (see type description for details)\n- `ADMIN-404-8`\n- `ADMIN-404-10`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                }
              }
            }
          },
          "429": {
            "description": "Too many API requests\n\nExpected values for `ProxyError.code`: (see type description for details)\n- `429`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyError"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      }
    },
    "/v1/orgs/{orgId}/directory/groups/{groupId}/memberships/{accountId}": {
      "delete": {
        "tags": [
          "Directory"
        ],
        "x-experimental": true,
        "summary": "Remove user from group",
        "description": "**The API is available for customers using the new user management experience only. Learn more about the [new user management experience](https://community.atlassian.com/t5/Atlassian-Access-articles/User-management-for-cloud-admins-just-got-easier/ba-p/1576592).**\n\nThis API will:\n- Remove user from a group.\n- Remove multiple permissions for user at once.\n- Easily manage permissions, content access, notification schemes, and roles.\n\nThis API will not:\n- Make modifications to group memberships that are synchronized through SCIM. To make changes to these memberships, you will need to modify them within your external identity provider. Learn more about [configuring user provisioning with an identity provider](https://support.atlassian.com/provisioning-users/docs/configure-user-provisioning-with-an-identity-provider/).\n- Modify `site-admin` group and therefore revoke org-admin role from a user.\n",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "description": "Your organization is identified by a Unique ID. You get your organization ID and Organization API key simultaneously.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "description": "Unique ID that serves as reference to the group.\nUse the [Jira Group Search API](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-groups/#api-rest-api-3-groups-picker-get) to get the groupId (if Jira is available for your Organization). **Jira APIs use a different [authentication method ](https://developer.atlassian.com/cloud/jira/platform/basic-auth-for-rest-apis/).**\nIf you don’t have Jira, export a .csv of the user list. Make sure to select **pivot to column** when prompted. Learn how to [export users from a site](https://support.atlassian.com/organization-administration/docs/export-users-from-a-site/).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "description": "Unique ID of the user's account that you are adding to the group.\nUse the [Jira User Search API](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-users/#api-rest-api-3-users-search-get) to get the accountId (if Jira is available for your Organization). **Jira APIs use a different [authentication method ](https://developer.atlassian.com/cloud/jira/platform/basic-auth-for-rest-apis/).**\nIf you don’t have Jira, export a .csv of the user list. Learn how to [export users from a site](https://support.atlassian.com/organization-administration/docs/export-users-from-a-site/).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User was successfully removed from the group in the organization directory.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericActionSuccessModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request\n\nExpected values for `ApplicationError.code`: (see type description for details)\n- `ADMIN-400-4`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\n\nExpected values for `ApplicationError.code`: (see type description for details)\n  - `ADMIN-401-2`\n\nExpected values for `ProxyError.code`: (see type description for details)\n  - `401`\n",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ProxyError"
                    },
                    {
                      "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden\n\nExpected values for `ApplicationError.code`: (see type description for details)\n- `ADMIN-403-3`\n- `ADMIN-403-5`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                }
              }
            }
          },
          "404": {
            "description": "Not Found\n\nExpected values for `ApplicationError.code`: (see type description for details)\n- `ADMIN-404-8`\n- `ADMIN-404-10`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors.ApplicationErrors.Model"
                }
              }
            }
          },
          "429": {
            "description": "Too many API requests\n\nExpected values for `ProxyError.code`: (see type description for details)\n- `429`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyError"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error.InternalError"
          }
        }
      }
    },
    "/v2/orgs/{orgId}/workspaces": {
      "post": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Get list of workspaces",
        "x-experimental": true,
        "description": "A workspace refers to a specific instance of an Atlassian product that is accessed through a unique URL. Whenever a user initiates or adds a new product instance, it results in the creation of a distinct workspace.\n\nThis API will:\n- Return a paginated list of workspaces in a given org\n- Return more details about an organization's products (including product URL).\n",
        "operationId": "queryWorkspacesV2",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchWorkspacesRequestV2"
              },
              "examples": {
                "cursor_only": {
                  "value": {
                    "limit": 20
                  }
                },
                "search_workspaces_request": {
                  "value": {
                    "limit": 20,
                    "sort": [
                      {
                        "field": "attributes.type",
                        "order": "asc"
                      }
                    ],
                    "query": {
                      "and": [
                        {
                          "field": {
                            "name": "attributes.type",
                            "values": [
                              "confluence"
                            ]
                          }
                        },
                        {
                          "searchWorkspaces": "some-particular-workspace"
                        },
                        {
                          "features": [
                            "some-feature"
                          ]
                        },
                        {
                          "policies": [
                            "some-policy"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Your organization is identified by a Unique ID. You get your organization ID and Organization API key simultaneously.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageDataResponseV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request\n\nExpected values for `ApplicationError.code`: (see type description for details)\n- `ADMIN-400-4`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized\n\nExpected values for `ProxyError.code`: (see type description for details)\n  - `401`\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.atlassian.com/admin"
    }
  ],
  "x-atlassian-narrative": {
    "documents": [
      {
        "title": "About",
        "anchor": "About",
        "body": "The Organizations REST API enables you to retrieve and make changes to the information in your organization. Use this API to update user access, create and update organization policies, get domains, and get event information. "
      },
      {
        "title": "Authentication",
        "anchor": "auth",
        "body": "Authentication is implemented via an API key. Use the API Key as a Bearer access token to authenticate the script and manage your organization. The Organization ID is used as a unique identifier in the path parameter for the organization. Copy the Organization ID and API key and keep them in a safe place. We won’t show them to you again.\n\nTo make requests to the API with the client/tool of your choice, [Create an API key and get the organization ID](https://support.atlassian.com/organization-administration/docs/manage-an-organization-with-the-admin-apis/)."
      },
      {
        "title": "Version and URI",
        "anchor": "uri",
        "body": "\nThe URIs for resources have the following structure:\n\n```\nhttps://api.atlassian.com/admin/<version>/orgs/<resource-name>\n```"
      },
      {
        "title": "Pagination",
        "anchor": "Pagination",
        "body": "\nThe Organizations REST API uses pagination to conserve server resources and limit response size. If there are more results available after the current page, a link to the next page of results is included in the JSON. You can use the `cursor` parameter to set a specific starting point for the results."
      },
      {
        "title": "Experimental features",
        "anchor": "Experimental features",
        "body": "\nMethods marked as experimental may change without an earlier notice. We are looking for your feedback for these methods."
      },
      {
        "title": "Vocabulary",
        "anchor": "Vocabulary",
        "body": "\nThere are several concepts that are common ideas with a unique meaning in Atlassian Administration. Learn more about [terminology](https://developer.atlassian.com/cloud/admin/cloud-admin-vocabulary/) related to the cloud admin experience."
      }
    ]
  },
  "components": {
    "responses": {
      "Error.InvalidDomainIdentifier": {
        "description": "Invalid domain identifier",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ApplicationError"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "enum": [
                              "ADMIN-400-2"
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "Error.InvalidPageCursor": {
        "description": "Invalid page cursor",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "$ref": "#/components/schemas/Error.InvalidPageCursor.Model"
            }
          }
        }
      },
      "Error.InvalidResource": {
        "description": "Resource is not valid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error.InvalidResource.Model"
            }
          }
        }
      },
      "Error.DomainNotFound": {
        "description": "Domain not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "$ref": "#/components/schemas/Error.DomainNotFound.Model"
            }
          }
        }
      },
      "Error.NoPerms": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error.NoPerms.Model"
            }
          }
        }
      },
      "Error.OrgNotFound": {
        "description": "Organization not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "$ref": "#/components/schemas/Error.OrgNotFound.Model"
            }
          }
        }
      },
      "Error.Unauthenticated": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ProxyError"
            }
          }
        }
      },
      "Error.Unauthorized": {
        "description": "The consumer could not be authenticated.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "key"
              ],
              "properties": {
                "key": {
                  "type": "string",
                  "enum": [
                    "unauthorized",
                    "asapUnauthorizedIssuer"
                  ]
                }
              }
            }
          }
        }
      },
      "Error.RateLimited": {
        "description": "Too many API requests",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ProxyError"
            }
          }
        }
      },
      "Error.InternalError": {
        "description": "Internal error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error.InternalError.Model"
            }
          }
        }
      },
      "Error.CdenPolicyValidationFailed": {
        "description": "CDEN policy validation failed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error.CdenPolicyValidationFailed.Model"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "OrgModel": {
        "type": "object",
        "required": [
          "id",
          "type",
          "attributes",
          "relationships",
          "links"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the Org"
          },
          "type": {
            "type": "string",
            "enum": [
              "orgs"
            ],
            "description": "Type name of this object"
          },
          "attributes": {
            "type": "object",
            "description": "Attributes of this object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of this Org"
              }
            }
          },
          "relationships": {
            "type": "object",
            "description": "Relationships of this object",
            "properties": {
              "domains": {
                "type": "object",
                "description": "Link to the related Domains of the Org",
                "properties": {
                  "links": {
                    "type": "object",
                    "$ref": "#/components/schemas/LinkRelatedModel"
                  }
                }
              },
              "users": {
                "type": "object",
                "description": "Link to the related Users of the Org",
                "properties": {
                  "links": {
                    "type": "object",
                    "$ref": "#/components/schemas/LinkRelatedModel"
                  }
                }
              }
            }
          },
          "links": {
            "type": "object",
            "description": "Link to this Org",
            "$ref": "#/components/schemas/LinkSelfModel"
          }
        }
      },
      "Org": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/OrgModel"
          }
        }
      },
      "OrgPage": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "0 or more values of `Org` are returned",
            "items": {
              "$ref": "#/components/schemas/OrgModel"
            }
          },
          "links": {
            "type": "object",
            "$ref": "#/components/schemas/LinkPageModel",
            "description": "Links for Pagination."
          }
        }
      },
      "Product": {
        "type": "object",
        "required": [
          "key",
          "name"
        ],
        "properties": {
          "key": {
            "type": "string",
            "enum": [
              "jira-software",
              "jira-service-desk",
              "jira-core",
              "jira-ops",
              "stride",
              "hipchat",
              "confluence",
              "bitbucket",
              "trello",
              "opsgenie",
              "statuspage"
            ],
            "description": "Unique key of the Product"
          },
          "name": {
            "type": "string",
            "description": "Name of the Product"
          },
          "url": {
            "type": "string",
            "description": "URL of the Product"
          },
          "last_active": {
            "type": "string",
            "format": "date-time",
            "description": "Last active date for a product"
          }
        }
      },
      "UserProductLastActive": {
        "required": [
          "id",
          "key"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the Product instance"
          },
          "key": {
            "type": "string",
            "enum": [
              "jira-software",
              "jira-service-desk",
              "jira-core",
              "jira-ops",
              "stride",
              "hipchat",
              "confluence",
              "bitbucket",
              "trello",
              "opsgenie",
              "statuspage"
            ],
            "description": "Unique key of the Product"
          },
          "last_active": {
            "type": "string",
            "format": "date",
            "description": "Last active date for a product"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "account_id",
          "account_type",
          "account_status",
          "name",
          "picture"
        ],
        "discriminator": {
          "propertyName": "account_type"
        },
        "properties": {
          "account_id": {
            "type": "string",
            "description": "The account ID for the user. The format is [a-zA-Z0-9_|-:]{1,128}"
          },
          "account_type": {
            "type": "string",
            "description": "The type of account",
            "enum": [
              "atlassian",
              "customer",
              "app"
            ]
          },
          "account_status": {
            "type": "string",
            "description": "The lifecycle status of the account",
            "enum": [
              "active",
              "inactive",
              "closed"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name of the user. Should be used for contextual rendering of the authorship in content. If the user has restricted visibility of their name, their nickname will be displayed as a substitute value"
          },
          "picture": {
            "type": "string",
            "description": "The absolute URI (RFC3986) to the avatar name of the user. Should be used for contextual rendering of the authorship in content. If the user has restricted visibility of their avatar, an alternative URI will be provided as a substitute value"
          },
          "email": {
            "type": "string",
            "description": "The email address of the user. If the user has restricted visibility of the email address, the property will be absent"
          },
          "access_billable": {
            "type": "boolean",
            "description": "Billable status of User in Atlassian Access"
          },
          "last_active": {
            "type": "string",
            "format": "date-time",
            "description": "Last active date for a user"
          },
          "product_access": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            },
            "description": "Products which the User is using"
          },
          "links": {
            "type": "object",
            "description": "Link to this User for mutation",
            "$ref": "#/components/schemas/LinkSelfModel"
          }
        }
      },
      "UserPage": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "0 or more values of Users are returned",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "description": "Total number of users in this Query"
              }
            }
          },
          "links": {
            "type": "object",
            "$ref": "#/components/schemas/LinkPageModel",
            "description": "Links for Pagination."
          }
        }
      },
      "UserProductAccessModel": {
        "type": "object",
        "required": [
          "product_access"
        ],
        "properties": {
          "product_access": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserProductLastActive"
            },
            "description": "Products accessed by the user"
          },
          "added_to_org": {
            "type": "string",
            "nullable": true,
            "format": "date",
            "description": "Date the user was added to the organization in ISO 8601 format."
          }
        }
      },
      "UserProductAccessActivityPage": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/UserProductAccessModel"
          },
          "links": {
            "$ref": "#/components/schemas/CursorNextPageModel"
          }
        }
      },
      "AddGroupMembershipInput": {
        "type": "object",
        "required": [
          "account_id"
        ],
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Unique ID of the user's account that you are adding to the group.\nUse the [Jira User Search API](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-users/#api-rest-api-3-users-search-get) to get the accountId (if Jira is available for your Organization). **Jira APIs use a different [authentication method ](https://developer.atlassian.com/cloud/jira/platform/basic-auth-for-rest-apis/).**\nIf you don’t have Jira, export a .csv of the user list. Learn how to [export users from a site](https://support.atlassian.com/organization-administration/docs/export-users-from-a-site/)."
          }
        }
      },
      "DomainModel": {
        "type": "object",
        "required": [
          "id",
          "type",
          "attributes",
          "links"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the Domain"
          },
          "type": {
            "type": "string",
            "description": "Type name of this object",
            "enum": [
              "domains"
            ]
          },
          "attributes": {
            "type": "object",
            "description": "Attributes of this object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Domain Name"
              },
              "claim": {
                "type": "object",
                "description": "Claim for the domain",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "http",
                      "dns"
                    ]
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "verified",
                      "deleted",
                      "unverified",
                      "superseded",
                      "missing_token"
                    ],
                    "description": "Verification Status of the Domain Claim"
                  }
                }
              }
            }
          },
          "links": {
            "type": "object",
            "description": "Link to this Domain",
            "$ref": "#/components/schemas/LinkSelfModel"
          }
        }
      },
      "Domain": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/DomainModel"
          }
        }
      },
      "DomainPage": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "0 or more values of Domain are returned",
            "items": {
              "$ref": "#/components/schemas/DomainModel"
            }
          },
          "links": {
            "type": "object",
            "$ref": "#/components/schemas/LinkPageModel",
            "description": "Links for Pagination."
          }
        }
      },
      "EventActorModel": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the Actor"
          },
          "name": {
            "type": "string",
            "description": "The display name of the Actor."
          },
          "email": {
            "type": "string",
            "description": "The email of the Actor."
          },
          "links": {
            "type": "object",
            "description": "Link to this Actor",
            "$ref": "#/components/schemas/LinkSelfModel"
          }
        }
      },
      "EventLocationModel": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "IP address"
          },
          "geo": {
            "type": "string",
            "description": "Geo location of the IP address",
            "deprecated": true
          },
          "countryName": {
            "type": "string",
            "description": "Country location according to the IP address"
          },
          "regionName": {
            "type": "string",
            "description": "Region location according to the IP address"
          },
          "city": {
            "type": "string",
            "description": "City location according to the IP address"
          }
        }
      },
      "EventObjectModel": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the event object"
          },
          "type": {
            "type": "string",
            "description": "Type name of this object"
          },
          "attributes": {
            "type": "object",
            "description": "Attributes of this object",
            "additionalProperties": {}
          },
          "links": {
            "description": "Links to this event object",
            "anyOf": [
              {
                "type": "object",
                "$ref": "#/components/schemas/LinkSelfAltModel"
              },
              {
                "type": "object",
                "$ref": "#/components/schemas/LinkAltModel"
              }
            ]
          }
        }
      },
      "EventModel": {
        "type": "object",
        "required": [
          "id",
          "type",
          "attributes",
          "links"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the Event"
          },
          "type": {
            "type": "string",
            "description": "Type name of this object",
            "enum": [
              "events"
            ]
          },
          "attributes": {
            "type": "object",
            "description": "Attributes of this object",
            "required": [
              "time",
              "action",
              "actor",
              "context"
            ],
            "properties": {
              "time": {
                "type": "string",
                "format": "date-time",
                "description": "The date and time of the event"
              },
              "action": {
                "type": "string",
                "description": "Kind of Event. Complete list see `event-actions` API."
              },
              "actor": {
                "type": "object",
                "description": "Actor is the User who performed this Event",
                "$ref": "#/components/schemas/EventActorModel"
              },
              "context": {
                "type": "array",
                "description": "Describes one or more entities that the action was performed against. This field describes the \"what\" of the event.",
                "items": {
                  "$ref": "#/components/schemas/EventObjectModel"
                }
              },
              "container": {
                "type": "array",
                "description": "Describes the location where the action was performed. This field describes the \"where\" of the event.",
                "items": {
                  "$ref": "#/components/schemas/EventObjectModel"
                }
              },
              "location": {
                "type": "object",
                "description": "Location from where the Actor performed the Event",
                "$ref": "#/components/schemas/EventLocationModel"
              }
            }
          },
          "links": {
            "type": "object",
            "description": "Link to this Event",
            "$ref": "#/components/schemas/LinkSelfModel"
          }
        }
      },
      "EventActionModel": {
        "type": "object",
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the event action object"
          },
          "type": {
            "type": "string",
            "description": "Type name of this object"
          },
          "attributes": {
            "type": "object",
            "description": "Attributes of this object",
            "required": [
              "displayName",
              "groupDisplayName"
            ],
            "properties": {
              "displayName": {
                "type": "string",
                "description": "Display name of the event action"
              },
              "groupDisplayName": {
                "type": "string",
                "description": "Display name of the event action group"
              }
            }
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/EventModel"
          }
        }
      },
      "EventPage": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "0 or more values of Event are returned",
            "items": {
              "$ref": "#/components/schemas/EventModel"
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "next": {
                "type": "string",
                "description": "Value for the next cursor"
              },
              "page_size": {
                "type": "integer",
                "description": "Number of items in a page"
              }
            }
          },
          "links": {
            "type": "object",
            "$ref": "#/components/schemas/LinkPageModel",
            "description": "Links for Pagination."
          }
        }
      },
      "EventActions": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "0 or more values of event actions are returned",
            "items": {
              "$ref": "#/components/schemas/EventActionModel"
            }
          }
        }
      },
      "PolicyModel": {
        "type": "object",
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the Policy"
          },
          "type": {
            "type": "string",
            "enum": [
              "policy"
            ],
            "description": "Type of this object"
          },
          "attributes": {
            "type": "object",
            "description": "Attributes of this object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip-allowlist",
                  "data-residency"
                ],
                "description": "Type of this Policy"
              },
              "name": {
                "type": "string",
                "description": "Name of this Policy"
              },
              "status": {
                "type": "string",
                "enum": [
                  "enabled",
                  "disabled"
                ],
                "description": "Status of this Policy"
              },
              "rule": {
                "type": "object",
                "description": "Rule of the Policy",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AllowIfContainedRule"
                  }
                ]
              },
              "resources": {
                "type": "array",
                "description": "list of resources Policy is associated with",
                "items": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          }
        }
      },
      "PolicyCreateModel": {
        "type": "object",
        "required": [
          "type",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "policy"
            ],
            "description": "Type of this object"
          },
          "attributes": {
            "type": "object",
            "description": "Attributes of this object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip-allowlist",
                  "data-residency"
                ],
                "description": "Type of this Policy"
              },
              "name": {
                "type": "string",
                "description": "Name of this Policy"
              },
              "status": {
                "type": "string",
                "enum": [
                  "enabled",
                  "disabled"
                ],
                "description": "Status of this Policy"
              },
              "rule": {
                "type": "object",
                "description": "Rule of the Policy",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AllowIfContainedRule"
                  }
                ]
              },
              "resources": {
                "type": "array",
                "description": "list of resources Policy is associated with",
                "items": {
                  "$ref": "#/components/schemas/ResourceInput"
                }
              }
            }
          }
        }
      },
      "PolicyUpdateModel": {
        "type": "object",
        "required": [
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the Policy"
          },
          "type": {
            "type": "string",
            "enum": [
              "policy"
            ],
            "description": "Type of this object"
          },
          "attributes": {
            "type": "object",
            "description": "Attributes of this object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip-allowlist",
                  "data-residency"
                ],
                "description": "Type of this Policy"
              },
              "name": {
                "type": "string",
                "description": "Name of this Policy"
              },
              "status": {
                "type": "string",
                "enum": [
                  "enabled",
                  "disabled"
                ],
                "description": "Status of this Policy"
              },
              "rule": {
                "type": "object",
                "description": "Rule of the Policy",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AllowIfContainedRule"
                  }
                ]
              },
              "resources": {
                "type": "array",
                "description": "list of resources Policy is associated with",
                "items": {
                  "$ref": "#/components/schemas/ResourceInput"
                }
              }
            }
          }
        }
      },
      "Policy": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/PolicyModel"
          }
        }
      },
      "PolicyCreateInput": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/PolicyCreateModel"
          }
        }
      },
      "PolicyUpdateInput": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/PolicyUpdateModel"
          }
        }
      },
      "PolicyPage": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "0 or more values of Policy are returned",
            "items": {
              "$ref": "#/components/schemas/PolicyModel"
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "next": {
                "type": "string",
                "nullable": true,
                "description": "Value for the next cursor"
              },
              "page_size": {
                "type": "integer",
                "description": "Number of items in a page"
              }
            }
          },
          "links": {
            "type": "object",
            "$ref": "#/components/schemas/LinkPageModel",
            "description": "Links for Pagination."
          }
        }
      },
      "ResourceInput": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "links": {
            "$ref": "#/components/schemas/Links"
          }
        }
      },
      "ResourceUpdateInput": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "links": {
            "$ref": "#/components/schemas/Links"
          }
        }
      },
      "PageDataResponseV2": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/WorkspaceModel"
            }
          },
          "links": {
            "$ref": "#/components/schemas/LinkPageModel"
          },
          "meta": {
            "$ref": "#/components/schemas/MetaV2"
          }
        }
      },
      "WorkspaceModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "typeKey": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "owner": {
                "type": "string",
                "nullable": true
              },
              "status": {
                "type": "string",
                "enum": [
                  "online",
                  "offline",
                  "deprecated"
                ]
              },
              "statusDetails": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "icons": {
                "type": "object",
                "additionalProperties": {}
              },
              "avatars": {
                "type": "object",
                "additionalProperties": {}
              },
              "labels": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "sandbox": {
                "$ref": "#/components/schemas/Sandbox"
              },
              "usage": {
                "type": "integer",
                "nullable": true
              },
              "capacity": {
                "type": "integer",
                "nullable": true
              },
              "createdAt": {
                "type": "string",
                "nullable": true
              },
              "createdBy": {
                "type": "string",
                "nullable": true
              },
              "updatedAt": {
                "type": "string",
                "nullable": true
              },
              "hostUrl": {
                "type": "string",
                "nullable": true
              },
              "realm": {
                "type": "string"
              },
              "regions": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "readOnly": true,
            "additionalProperties": {}
          },
          "links": {
            "$ref": "#/components/schemas/LinkSelfModel"
          },
          "relationships": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/PolicyModelV2"
                  },
                  {
                    "$ref": "#/components/schemas/EntitlementModelV2"
                  },
                  {
                    "$ref": "#/components/schemas/FeatureModelV2"
                  }
                ]
              }
            }
          }
        }
      },
      "MetaV2": {
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer"
          },
          "startIndex": {
            "type": "integer",
            "nullable": true
          },
          "endIndex": {
            "type": "integer",
            "nullable": true
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "SearchWorkspacesRequestV2": {
        "type": "object",
        "description": "Workspaces request supporting enhanced Workspace searching.",
        "properties": {
          "query": {
            "$ref": "#/components/schemas/QueryVariants"
          },
          "limit": {
            "type": "integer",
            "description": "Specifies the maximum page size.",
            "minimum": 1,
            "maximum": 1000,
            "default": 20
          },
          "sort": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SortField"
            }
          },
          "cursor": {
            "type": "string",
            "nullable": true,
            "description": "A base-64 encoded continuation token used for pagination. When a cursor is provided in the request body, no other properties may be present."
          }
        }
      },
      "SortField": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "order": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          }
        }
      },
      "QueryVariants": {
        "description": "Possible operators/operand in the event query.",
        "nullable": true,
        "anyOf": [
          {
            "$ref": "#/components/schemas/AndOperator"
          },
          {
            "$ref": "#/components/schemas/FieldOperand"
          },
          {
            "$ref": "#/components/schemas/SearchWorkspacesOperand"
          },
          {
            "$ref": "#/components/schemas/FeatureFilter"
          },
          {
            "$ref": "#/components/schemas/PolicyFilter"
          }
        ]
      },
      "AndOperator": {
        "type": "object",
        "nullable": true,
        "description": "Returns workspaces matching all of the nested query variants. Absence of nested variants makes this operator no-op.\n",
        "additionalProperties": false,
        "properties": {
          "and": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryVariants"
            }
          }
        }
      },
      "FieldOperand": {
        "type": "object",
        "nullable": true,
        "description": "Returns workspaces where a specified event field has one of the specified values. Absent of values makes this operator no-op.\n",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "field": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "values": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "FeatureFilter": {
        "type": "object",
        "nullable": true,
        "description": "Returns workspaces, which contains listed features.\n",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PolicyFilter": {
        "type": "object",
        "nullable": true,
        "description": "Returns workspaces, which contains listed policies.\n",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SearchWorkspacesOperand": {
        "type": "object",
        "nullable": true,
        "description": "Returns workspaces, which partially contain the specified text in workspace name or url.\n",
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "Sandbox": {
        "type": "object",
        "nullable": true,
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CHILD",
              "NONE"
            ]
          }
        }
      },
      "EntitlementModelV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "attributes": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "planKey": {
                "nullable": true,
                "type": "string"
              },
              "plan": {
                "nullable": true,
                "type": "string"
              }
            }
          }
        }
      },
      "PolicyModelV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "attributes": {
            "type": "object",
            "properties": {
              "fields": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "FeatureModelV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "attributes": {
            "type": "object",
            "properties": {
              "fields": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "Resource": {
        "type": "object",
        "required": [
          "id",
          "applicationStatus"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "applicationStatus": {
            "type": "string",
            "description": "Status of policy application on resource",
            "enum": [
              "applying",
              "removing",
              "applied",
              "failed",
              "scheduled"
            ]
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "links": {
            "$ref": "#/components/schemas/Links"
          }
        }
      },
      "Meta": {
        "type": "object",
        "properties": {
          "scheduledDate": {
            "type": "string"
          },
          "migrationStartDateTime": {
            "type": "string"
          },
          "migrationEndDataTime": {
            "type": "string"
          },
          "atlassianAccountId": {
            "type": "string"
          }
        }
      },
      "Links": {
        "type": "object",
        "properties": {
          "ticket": {
            "type": "string"
          }
        }
      },
      "AllowIfContainedRule": {
        "type": "object",
        "description": "Applicable when policy type is `ip-allowlist` or `data-residency`",
        "required": [
          "in"
        ],
        "properties": {
          "in": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LinkSelfModel": {
        "type": "object",
        "required": [
          "self"
        ],
        "properties": {
          "self": {
            "type": "string",
            "description": "URL to fetch this resource"
          }
        }
      },
      "LinkAltModel": {
        "type": "object",
        "required": [
          "alt"
        ],
        "properties": {
          "alt": {
            "type": "string",
            "description": "Alternate URL to fetch this resource"
          }
        }
      },
      "LinkRelatedModel": {
        "type": "object",
        "required": [
          "related"
        ],
        "properties": {
          "related": {
            "type": "string",
            "description": "URL to fetch this resource"
          }
        }
      },
      "LinkSelfAltModel": {
        "type": "object",
        "description": "Links for a resources with self and alternate links",
        "properties": {
          "self": {
            "type": "string",
            "description": "URL to fetch this resource"
          },
          "alt": {
            "type": "string",
            "description": "Alternate URL to fetch this resource"
          }
        }
      },
      "LinkPageModel": {
        "type": "object",
        "description": "Links for a Paginated response",
        "properties": {
          "self": {
            "type": "string",
            "description": "URL to fetch this Page"
          },
          "prev": {
            "type": "string",
            "description": "URL to fetch the Previous Page"
          },
          "next": {
            "type": "string",
            "description": "URL to fetch the Next Page"
          }
        }
      },
      "CursorNextPageModel": {
        "type": "object",
        "description": "Cursors for REST API pagination",
        "properties": {
          "next": {
            "type": "string",
            "description": "Cursor to fetch next page"
          }
        }
      },
      "GenericActionSuccessModel": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User 389439742983287 has been successfully removed from the organization.",
            "description": "A description of the entities affected, and changes made as a result of calling this API."
          }
        }
      },
      "ApplicationError": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for this particular occurrence of the error."
          },
          "status": {
            "type": "string",
            "description": "The HTTP status code applicable to this error."
          },
          "code": {
            "type": "string",
            "example": "ADMIN-XXX-X",
            "description": "An application-specific error code:\n  - `ADMIN-400-1`  - Invalid page cursor\n  - `ADMIN-400-2`  - Invalid domain identifier\n  - `ADMIN-400-3`  - Invalid time date\n  - `ADMIN-400-4`  - Invalid resource\n  - `ADMIN-400-24` - Invalid request body\n  - `ADMIN-403-3`  - Not allowed to manage the org\n  - `ADMIN-403-5`  - Not allowed to manage the group\n  - `ADMIN-404-1`  - Unknown resource\n  - `ADMIN-404-2`  - Organization not found\n  - `ADMIN-404-3`  - Domain not found\n  - `ADMIN-404-4`  - Event not found\n  - `ADMIN-404-5`  - Policy not found\n  - `ADMIN-404-8`  - User not found\n  - `ADMIN-404-10` - Group not found\n  - `ADMIN-405-1`  - Method not supported\n  - `ADMIN-429-1`  - Limit exceeded\n  - `ADMIN-500-1`  - Internal error\n"
          },
          "title": {
            "type": "string",
            "description": "Human-readable summary of the error."
          },
          "detail": {
            "type": "string",
            "description": "Human-readable explanation specific to this occurrence of the error, and a suggested action to resolve it."
          }
        }
      },
      "ProxyError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "description": "The HTTP status code applicable to this error."
          },
          "message": {
            "type": "string",
            "description": "Human-readable explanation of the error."
          }
        }
      },
      "NoPermsError": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "Timestamp of the request."
          },
          "path": {
            "type": "string",
            "description": "Path of the request."
          },
          "status": {
            "type": "number",
            "enum": [
              403
            ],
            "description": "The HTTP status code applicable to this error."
          },
          "error": {
            "type": "string",
            "description": "The HTTP status text applicable to this error."
          },
          "message": {
            "type": "string",
            "description": "Human-readable explanation of the error."
          },
          "requestId": {
            "type": "string",
            "description": "Id of the request."
          }
        }
      },
      "Errors.ApplicationErrors.Model": {
        "type": "object",
        "title": "ApplicationErrors",
        "description": "A list of application errors",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationError"
            }
          }
        }
      },
      "Error.InvalidPageCursor.Model": {
        "type": "object",
        "description": "Invalid page cursor",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApplicationError"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ADMIN-400-1"
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "Error.InvalidSearchTimeDate.Model": {
        "type": "object",
        "description": "Invalid time date",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApplicationError"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ADMIN-400-3"
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "Error.InvalidResource.Model": {
        "type": "object",
        "description": "Resource is not valid",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApplicationError"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ADMIN-400-4"
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "Error.OrgNotFound.Model": {
        "type": "object",
        "description": "Organization not found",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApplicationError"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ADMIN-404-2"
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "Error.NoPerms.Model": {
        "type": "object",
        "description": "Forbidden",
        "$ref": "#/components/schemas/NoPermsError"
      },
      "Error.DomainNotFound.Model": {
        "type": "object",
        "description": "Domain not found",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApplicationError"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ADMIN-404-3"
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "Error.EventNotFound.Model": {
        "type": "object",
        "description": "Event not found",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApplicationError"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ADMIN-404-4"
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "Error.PolicyNotFound.Model": {
        "type": "object",
        "description": "Policy not found",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApplicationError"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ADMIN-404-5"
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "Error.PolicyResourceNotFound.Model": {
        "type": "object",
        "description": "Policy Resource not found",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApplicationError"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ADMIN-404-6"
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "Error.InternalError.Model": {
        "type": "object",
        "description": "Internal error",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApplicationError"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ADMIN-500-1"
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "Error.CdenPolicyValidationFailed.Model": {
        "type": "object",
        "description": "CDEN policy validation failed",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApplicationError"
                },
                {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ADMIN-500-2"
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      }
    }
  }
}